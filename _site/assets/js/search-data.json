{"0": {
    "doc": "R",
    "title": "R",
    "content": "### Contents 1. [Running R](#Running-R) 1. [Packages](#Loading-Packages) 2. [Adding Packages](#Modifying-Packages) 3. [Running](#Running-Scripts) 2. [RStudio](#RStudio) ## Running R To run scripts in the R programming language using the login node, follow the steps listed below: ### Packages Located in `/home/data/NDClab/tools/containers/R-4.1.2/` is a default container that contains all environment variables and packages requried to run any R script. Below we will explore how we can use this container to run your R script. ### Packages To add a package to this R container, you can access the recipe file named `R.recipe`. On line 85 is a line instructing R to install a number of packages. If you do not see a package required for your code simply add your package name to this list and rebuild the container image in a Linux environment with root access. ### Running To run your R script, execute the following command in your terminal. ``` sh /home/data/NDClab/tools/lab-devOps/scripts/R/rrun.sh .R ``` This will generate an sbatch script, submit it, and return an output to your folder location. After you initially run `rrun.sh`, you should subsequently run the sbatch file generated in your folder via: ``` sbatch .sub ``` ## RStudio ",
    "url": "/docs/hpc/R.html",
    "relUrl": "/docs/hpc/R.html"
  },"1": {
    "doc": "HPC Access",
    "title": "HPC Access",
    "content": "## Antivirus Data security is of utmost importance. All members of the NDCLab are expected to install, and maintain up-to-date, an appropriate antivirus program on their computer prior to connecting the the FIU HPC. If you are unsure of which antivirus program to install, visit [CNET](https://www.cnet.com/), which has reviews for various options. Select an antivirus program that has received favorable reviews from CNET. Free programs are encouraged, provided that the reviews are favorable. Note that FIU recommend AVG for Mac. ## Gaining Access All members of the NDCLab receive access to the lab folder on the FIU HPC. The lab manager, who is responsible for coordinating your access request, will need your FIU e-mail and Panther ID. At any time during the onboarding process, you may attend the HPC Onboarding training: **When:** every Tuesday, 11 am - 12 noon EST **Where:** http://fiu.zoom.us/my/cassian You must attend the training session before you begin using the HPC. ## HPC Structure Once access is granted to the HPC, you will only be able to read and modify contents within folders that correspond to your role within the lab. For more information on the HPC, see [this in-depth page](https://ndclab.github.io/wiki/docs/technical-docs/hpc-doc.html). ",
    "url": "/docs/Onboarding/accessing-hpc.html",
    "relUrl": "/docs/Onboarding/accessing-hpc.html"
  },"2": {
    "doc": "Accessing the HPC",
    "title": "Accessing the HPC",
    "content": "![cluster visualization](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/hpc/cluster.png) *Visualization by Yale Center for Research Computing* ### Contents 1. [Connecting](#Connecting) 1. [Login Node](#Login-Node) 2. [Visual Node](#Visual-Node) 2. [Structure](#Structure) ## Connecting To use the HPC, a lab member must either use on-campus WiFi or utilize a VPN to access the [FIU intranet](https://en.wikipedia.org/wiki/Intranet). Once a secure connection is established, both the login node and visual nodes can be accessed for job submission and file manipulation. ### VPN (Off-Campus Only!) If a lab member is using on-campus WiFi, this step can be skipped. However, if a lab member is accessing the HPC off-campus, they must connect to the [FIU VPN](https://network.fiu.edu/vpn/) to access the FIU intranet. ### Login-Node The login node, also known as the head node, is the primary HPC entry point for submitting jobs and transferring small amounts of data. Note: a user must login to the login-node **before** logging into the hpcgui to initialize their home directory. The preferred (and easiest) method for accessing the HPC login node is through secure shell (SSH). This comes installed on Windows 10 and MacOS. Previous windows versions can install [OpenSSH](https://docs.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse). Verify your ssh installation by typing in the command prompt/terminal. ``` ssh -v localhost ``` 1. Once verified, ssh into the login node, Where `userName` is the lab member's FIU username: ``` ssh userName@hpclogin01 ``` 2. Enter the password when prompted: ``` userName@hpclogin01 password: ``` 3. A prompt will indicate a successful login: ``` ####################################################################### Welcome to the FIU Instructional & Research Computing Center (IRCC) ####################################################################### ``` ### Visual-Node The visualization node is used for directly editing files on the cluster and for GUI manipulation. To access the visual node, simply click [hpcgui.fiu.edu](hpcgui.fiu.edu). The red boxes detail the following: * Files: represent a graphical representation of the file structure on the cluster * Clusters: provide [shell](https://ndclab.github.io/wiki/docs/shell) access to the cluster * Interactive Apps: GUI applications available for HPC account-holders ## Structure The NDCLab follows the structure listed below. ![NDCLab Privilges](https://user-images.githubusercontent.com/26397102/122823863-dfbfdb80-d2ad-11eb-94b8-daf9a585f890.png) The left and right diagrams represent the varying read & execute privileges and the write privileges respectively. Each color corresponds to the following group: ![colorcode](https://user-images.githubusercontent.com/26397102/122824230-607ed780-d2ae-11eb-81bc-93011d4569c4.png) All lab members are part of the NDCLab, but only a select few members are part of a specific project. This results in specific privileges given to select members to ensure data compliance. For example, a lab member has read and execute privileges for any public data on the cluster, but only \"Project-A\" lab members will be able to read and execute the private section of `data/project-A/`. The main directories -- `datasets`, `tools`, and `analyses` -- are described below. ### datasets Each project has a directory in this folder to house de-identified and encrypted data. Project leads, approved project members, and lab staff will have sole read and write access to the entire directory, while external lab members will be able to only view publicly-available data. ### tools This folder contains various scripts and software utilized within the lab for organization, preprocessing, and compliance checking. ### analyses Finally, each ongoing project has a folder in the `analyses` directory, which contains cleaned datasets, plots, and various statistics. ",
    "url": "/docs/hpc/accessing.html",
    "relUrl": "/docs/hpc/accessing.html"
  },"3": {
    "doc": "AD Account",
    "title": "AD Account",
    "content": "## What is an AD Account This is an alternative to your FIU student account, used for volunteers, interns, and employees. It will look like an FIU login, but without any numbers. You can use your AD account to log in to e-mail and Zoom. It will also become your login information for REDCap and accessing the lab workstations. ## How Do I Know if I Have an AD Account? Everyone receives an AD account once employed, so if you had an on-campus job before, you almost certainly have an AD account. To check: 1. Go to account.fiu.edu. 2. Log in. 2. Scroll down until you find the \"Email\" section. 3. Review all your FIU usernames. If there is one without any numbers, that is your AD account. ## Accessing Your AD Account Through Microsoft Outlook Upon receiving login credentials to your FIU employee/AD account, the default method to access this inbox will be through Microsoft Outlook and NOT Gmail as previously available for FIU student email accounts. 1. Visit (https://outlook.office.com) and click **\"Sign In\"** to enter your email address. 2. Upon entering your email address, you will be redirected to FIU's Outlook login; it will ask for your email address and password. 3. Upon entering your email address and password, it will send you to FIU's Two Factor Authenticator, which will prompt you to verify your authenticity in a variety of ways: DUO app, text, or call. 4. After authentication, it will ask you to choose between two accounts: your student account and your employee/AD account. 5. After choosing your **employee account**, a prompt will appear that you now have access to the account and you will be able to access the inbox on Outlook. For those who have not used Outlook before, [here](https://https://support.microsoft.com/en-us/office/basic-tasks-in-outlook-192eb102-2ee2-4049-b7f5-aa0eb4231fbb) is a basic users guide to get you started. ## Importance of Your AD Account In this inbox you will receive emails necessary to continue the CCF onboarding process, such as verifying your REDCap account. So **check regularly**. ",
    "url": "/docs/Onboarding/ad-account.html",
    "relUrl": "/docs/Onboarding/ad-account.html"
  },"4": {
    "doc": "Around the Lab",
    "title": "Around the Lab",
    "content": "# Around the Lab ",
    "url": "/docs/around-the-lab",
    "relUrl": "/docs/around-the-lab"
  },"5": {
    "doc": "CCF Access",
    "title": "CCF Access",
    "content": "## Overview When a new lab member joins the lab in a capacity that requires CCF access, they do so as either an \"intern\" or a \"volunteer.\" These terms refer to unpaid individuals involved in study or non-study activities within the Center for Children and Families. \"Interns\" are current university (or MDCPS school) students or recent grads. \"Volunteers\" are individuals who are not affiliated with any university. CCF access if required all lab members who will be collecting or analyzing participant data. (Note: If you already have an FIU AD account from a prior internship or employment, then you also have an FIU e-mail address without any numbers in it. All CCF correspondence is likely to go to this e-mail address.) ## Step 1: Intern Application The incoming lab member must complete Form(A) of the FIU Intern Application-Applicant Form or the FIU Volunteer Applications-Applicant Form, as appropriate and send to **ndclab@fiu.edu** with a scan of their Panther ID (or valid driver's license) and a signed lab member agreement. Inform the lab manager if you already have an FIU AD account. The lab manager submits the intern application to the CCF, then completes a person-of-interest (POI) request. This triggers the CCF to initiate a background check for the incoming lab member. ## Step 2: Background Check All members of the NDCLab are required to complete a background check as part of their onboarding to the FIU Center for Children and Families (CCF). After submitting the intern application, the incoming lab member should watch their inbox (and spam box) carefully for the following two e-mails, which typically arrive approximately one week after the application form is submitted to the CCF: The first informs you that a DocuSign is being sent: ![background-check-email](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/background-check-email.png) The second is the DocuSign itself. ![docusign](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/docusign.png) The link within the e-mail will take you to a DocuSign form: ![background-check-form](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/background-check-form.png) When completing this form, use the following: **Reason for clearance:** Conduct research with minors and/or vulnerable people **Department:** Center for Children and Families Once the background check is complete, the CCF requests creation of an AD account. There can be a long delay (up to one month) at this part of the process. ## Step 3: CITI Training After completing the application and while waiting for the background check process to begin, the incoming member should immediately begin working on the [required CITI training courses](https://ndclab.github.io/wiki/docs/Onboarding/certifications.html). These trainings take time and the certificates will be required for later steps in the onboarding process. ## Step 4: CCF Access Request Once the background check is complete (and while awaiting the creation of the AD account), the lab manager completes an Access Request Form to indicate what level of CCF access the incoming lab member will require. This triggers the sending of the Volunteer Contact Form directly to the incoming lab member. ![volunteer-contact-form](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/volunteer-contact-form.png) A link at the bottom of this e-mail allows you to: * complete your emergency contact information for the CCF * sign a Code of Conduct * attach the two CCF-required [CITI course certificates](https://ndclab.github.io/wiki/docs/Onboarding/certifications.html) * attach a copy of your Panther ID or driver's license ## Step 5: Data Services The creation of the incoming lab member's AD account triggers an actionable e-mail from the CCF that includes completing a separate HIPAA training course. This message may be sent to either the e-mail associated with the new AD account or the student e-mail account. (Note: if you already had an FIU AD account from a prior internship or employment, then the CCF may not properly trigger an actionable e-mail and the lab manager will need to follow-up with the CCF directly in order to move the onboarding process forward. If you previously had an FIU e-mail address with no numbers in it, it is important that you communicate this to the lab manager.) The HIPAA training course must be completed under your AD account (that is, the new login that you have just been assigned or, if you previously had an FIU internship/employment, your re-activated login). Do not complete the HIPAA training under your student login. Once complete, click the link in the e-mail from the CCF to upload your certificate. ![hipaa-requirement](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/hipaa-requirement.png) Several days after submission of the HIPAA certificate, you will receive an e-mail from ccfdatasvcs@fiu.edu with a link to the \"CCF Data Services User Agreement,\" which you need to read and sign. This is the last actionable step in the CCF onboarding process. ![data-services-agreement](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/data-services-agreement.png) You will know that your onboarding is complete when you receive an e-mail informing you that you have been granted access to REDCap. ![redcap-access](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/redcap-access.png) Test your log-in immediately, then contact the lab manager to confirm that you have received access. ",
    "url": "/docs/Onboarding/ccf-access.html",
    "relUrl": "/docs/Onboarding/ccf-access.html"
  },"6": {
    "doc": "Certifications",
    "title": "Certifications",
    "content": "# Certifications All members of the NDCLab who will be involved in collecting or analyzing participant data are required to complete specific training courses as part of their onboarding to the FIU Center for Children and Families (CCF). These required courses include two CITI training courses and the FIU course on HIPAA. In addition, members of the lab who will be actively involved in handling participants as part of a study protocol are required to complete an additional CITI training course. ## Required for Members Handling Participant Data ### CITI 1. CITI Health Information Privacy and Security (HIPS) for Clinical Investigators (Stage 1 - HIPS) ![hips](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/hips.png) 2. Social and Behavioral Responsible Conduct of Research Course (Stage 1 - RCR) ![rcr](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/rcr.png) ### Non-CITI 3. Health Insurance Portability and Accountability Act (HIPAA) This course is on develop.fiu.edu. A [link is provided by the CCF](https://ndclab.github.io/wiki/docs/Onboarding/ccf-emails.html) during the onboarding process to fulfill the HIPAA Requirement. ## Required for Study Personnel Interacting with Participants ### CITI 4. Social/Behavioral Human Research Course (Stage 1 - Basic Course) ![basic-course](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/onboarding/basic-course.png) ## How to complete required certifications ### CITI Courses 1. Go to the [CITI Training Website](https://about.citiprogram.org/en/homepage/). 2. Click on **Register** (if you are new to CITI) and search for **FIU**. Complete the registration. 3. Log in and select **Add a Course**. 4. Add each of course listed above. Only add the fourth (Basic Course) if you will be handling participants as part of a study protocol. 5. Complete ALL required modules for each course. 6. Send copies of your completion certificates (PDF format) for each course to **ndclab@fiu.edu**. ### HIPAA Course Follow the link in the [e-mail sent by the CCF](https://ndclab.github.io/wiki/docs/onboarding/ccc-emails.html). ",
    "url": "/docs/Onboarding/certifications.html",
    "relUrl": "/docs/Onboarding/certifications.html"
  },"7": {
    "doc": "Cognitive Control",
    "title": "Cognitive Control",
    "content": "# Overview (coming soon!) ",
    "url": "/docs/welcome/cog-control.html",
    "relUrl": "/docs/welcome/cog-control.html"
  },"8": {
    "doc": "Community Standards",
    "title": "Community Standards",
    "content": "## Overview We are here to [do great science and develop our skills](https://ndclab.github.io/wiki/docs/welcome/lab-culture.html). These goals require us to work together, collaboratively and as a community, in order to be more than the sum of our parts. This page outlines our core values and how we can each contribute to building this community. ## Our Values ### Openness * We seek to be open-minded and curious. This means we listen to new ideas, celebrate differences, and operate with humility. * We believe in open, transparent, and reproducible science, and we demonstrate these beliefs in the honest and transparent way that we conduct our work. ### Accountability * We operate with integrity in order to merit the trust of our colleagues, protect the rights of our participants, and uphold public trust in science. * We fulfill the promises we make to one another. ### Respect * We demonstrate professionalism in all our interactions with colleagues, participants, and administrators to acknowledge the value of their time and contributions. * We are responsive to one another, both in the timeliness of our replies and the quality of our responses. * We offer suggestions and feedback in a constructive manner that makes clear our supportive intentions. ## How We Participate in this Community The NDCLab is created by the actions and contributions of each member of the lab and, likewise, each member's conduct reflects back on the lab. We are only as strong as each of our members and therefore must commit to learning together, mentoring one another, and lifting one another up. We contribute to this lab's community by: * bringing our best to each activity we undertake * embodying the lab's values in all our actions (described above) * fulfilling the [expectations established for all lab members](https://ndclab.github.io/wiki/docs/around-the-lab/roles-expectations.html) ## Grounds For Dismissal From the Lab It is improper for one lab member, in failing to live up to our community standards, to decrease the value and enjoyment of the lab for others. As a result, members may be dismissed from the lab for: * a general and pernicious lack of professionalism in public-facing roles. * intentional violations of trust, such as: falsifying data, lying, plagiarism of any kind, intentionally withholding the full truth, actions or words that detract from a positive/inclusive environment, etc. Any suspected violation of trust should be [immediately reported](https://ndclab.github.io/wiki/docs/around-the-lab/report-concerns.html). * consistent or repetitive failure to uphold these values and meet the [expectations set for all lab members](https://ndclab.github.io/wiki/docs/around-the-lab/roles-expectations.html). ",
    "url": "/docs/around-the-lab/community-standards.html",
    "relUrl": "/docs/around-the-lab/community-standards.html"
  },"9": {
    "doc": "Contributing",
    "title": "Contributing",
    "content": "#### Contents 1. [Overview](#overview) 2. [GitHub](#github) 3. [Wiki](#wiki) 4. [Slack](#slack) 5. [Lab Meeting](#lab-meeting) ## Overview The NDCLab welcomes all contributions; there are many ways to contribute. ## GitHub Contributing to a project can be divided into two categories. Contributing with push access and without push access. Since lab projects are open source anyone can view the source code but not everyone can push changes to the repository. ### With Push Access ![gh_push-workflow](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/gh_push-workflow.png) Lab members with push access to a project create new branches (similar to how a new branch is created to update the who's who page as part of the [Get with Git program](https://ndclab.github.io/wiki/docs/Onboarding/get-with-git.html)). These branches are merged with `dev` in accordance with the lab's [GitHub workflow](https://ndclab.github.io/wiki/docs/etiquette/github-etiquette.html). ### Without Push Access ##### Fork and Pull If you do not have push access to a project, you will have to fork the repository first before submitting changes to the project team for review. Please follow the lab's [branch naming conventions](https://ndclab.github.io/wiki/docs/etiquette/naming-conventions.html) and submit an informative pull request. Thank you for your interest in our work! ##### Issue Submission The NDCLab prefers contributions via a fork and pull, but we recognize that contributors may identify improvements without having the requisite knowledge to provide a working implementation. In such cases, please: * Verify that the problem/suggestion does not already have an issue logged in GitHub. * Use the appropriate issue template to submit the problem/suggestion to the project team for review. ## Wiki Contributions to the lab wiki are **highly** encouraged, from the correction of typos to creation of new, useful pages. ### Slack Fully onboarded lab members can additionally contribute to the lab more holistically by sharing information on [Slack](https://ndclab.github.io/wiki/docs/Onboarding/slack-setup.html), including answering teammate questions posted on #general and #tech. ### Lab Meeting Fully onboarded lab members are encouraged to contribute to the agenda for the [weekly lab meeting](https://ndclab.github.io/wiki/docs/around-the-lab/lab-meeting.html) with relevant topics. ",
    "url": "/docs/contributing.html",
    "relUrl": "/docs/contributing.html"
  },"10": {
    "doc": "Current Projects",
    "title": "Current Projects",
    "content": "# Project-Specific Documentation ",
    "url": "/docs/current-projects",
    "relUrl": "/docs/current-projects"
  },"11": {
    "doc": "Docker",
    "title": "Docker",
    "content": "# Docker Usage How to use `docker` to run scripts from Matlab, Python, and R-base using GUI and terminal options. The steps are: - Build an image, - create a container, - execute a script or program in the container. ## Docker CLI Main commands for Docker are run, build, pull. `docker run` is used to run a new container instance of an image. If the image does not exist docker will attempt to download it from [Docker Hub](https://hub.docker.com). With run there are some common options that you can use with it: - `-i` or `--interactive` keeps the standard input open - `-t` or `--tty` creates a pseudo terminal or TTY - `--rm` removes the container when it exits; depending on how the container is configured this can mean onces you `exit` the terminal. ```sh # Usage # Will launch an Ubuntu container # if it does not have the image it will download it from hub.docker.com # will attempt to open a tty with the bash shell # and once you exit the terminal will remove (delete) the container docker run -it --rm ubuntu /bin/bash # After the container is created, you will be \"dropped\" into a bash terminal and you can # run scripts with the installed interpreter. ``` `docker pull` will \"pull\" or download an image and all the layers required to run that image to your computer. A normal use case for `docker pull` is to download an image you do not have by specifying the image name; `NAME[:TAG|@DIGEST]`. `NAME` is the name of the image, for example `ubuntu`. A tag normally refers to some form of versioning for that image, for example `ubuntu:latest`. And `@DIGEST` refers to a specific version for that `TAG`, for example `ubuntu@sha256:1d7b639619bd...`. Generally you specify the `TAG` and not the `DIGEST` unless you have very specific requirements. ```sh # Usage docker pull ubuntu:latest ``` `docker build` will build a docker image using a `Dockerfile` or the \"build instructions\" for the image. Generally you do not need additional options for the build command since most of the work is done in the `Dockerfile`. ```sh # Usage docker build Dockerfile ``` Below is an example is a simple `Dockerfile` for a Python container: ```Dockerfile FROM python:3.8 # Create the working dir WORKDIR /python_wdir # Install dependencies COPY requirements.txt . RUN pip install -r requirements.txt # Copy python source files into the image COPY src/ . ``` ### Additional Resources If you are using the CLI, the best resource available as reference is the help text, you can access it by doing `docker --help` or `docker command --help`. Alternatively for a more in-depth explanations for commands and options access the manual pages via `man docker` or [online](http://manpages.org/docker) [Wiki article](https://wiki.archlinux.org/index.php/Docker) ## Docker Compose Docker Compose is a way to simplify the build and deploy step for docker containers. It will handle most things like creating and removing a container, mounting and unmounting directories (folders), and creating and deleting networks. Its usage is very simple in most cases; you either run `docker-compose up -d` to start the docker container in a detached state or `docker-compose down` to stop the container and clean up any resources that were left dangling. The more time consuming step is creating the configuration file to define the container stack, this stack can have one or many container definitions. Here is a simple example for python: ```yaml version: 3 services: app: build: . volumes: - \"./data/:/data_in_container\" ``` ### Additional Resources For a full overview of options reference the [Compose file specification](https://docs.docker.com/compose/compose-file/). There are 15 versions of the format, as a rule of thumb use version 3.0 and only bump the minor version, 3.x, when you need specific functionality or something seems to not work as intended. ",
    "url": "/docs/technical-docs/docker-usage.html",
    "relUrl": "/docs/technical-docs/docker-usage.html"
  },"12": {
    "doc": "Etiquette",
    "title": "Etiquette",
    "content": "# Etiquette ",
    "url": "/docs/etiquette",
    "relUrl": "/docs/etiquette"
  },"13": {
    "doc": "Get with Git",
    "title": "Get with Git",
    "content": "# Get with Git ## Overview A large portion of NDCLab collaboration happens on GitHub. If you've never used GitHub before, never fear! This page walks you through a miniature training program to jumpstart your Git skills. Here is an overview of what we'll be doing: * Installing Git on your computer (for free). * Setting up your free GitHub account. * Learning the ropes of Git and GitHub. * Putting your new skills to use to update your entry on the NDCLab wiki [\"Who's Who\" page](https://ndclab.github.io/wiki/docs/welcome/whos-who.html). ## How to Get with Git Follow the steps below to become a Git ninja! We will set up your computer so you can use the Git language and tools locally (offline). We will also set up your identity on GitHub. GitHub is a web platform that is a \"hub\" for \"Git\" activities. After we have Git installed and you have a GitHub account, you can make your computer and GitHub talk to one another! 1. Find your [shell](https://ndclab.github.io/wiki/docs/technical-docs/shell.html). The shell enables you to interact quickly and easily with GitHub. 2. Install Git on your local machine. [This page](https://ndclab.github.io/wiki/docs/technical-docs/git_and_github.html) includes instructions for macOS, Windows, and Linux/Unix installations, as well as a lot of other useful information about working with Git and GitHub. Even though you won't understand it all now, read through the full page so you know that you have this helpful resource for the future. 3. [Sign up](https://github.com) for a free GitHub account. 4. Set up your identity by typing two commands into your shell: `git config --global user.name \"John Doe\"` `git config --global user.email johndoe@example.com` (Obviously, replace John Doe and johndoe@example.com with your actual name and your actual e-mail. If you're not sure whether you've done this before, check with the command `git config --list`.) 5. Authenticate yourself to GitHub by setting up a [personal access token](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token). (Be aware that other authentication methods are possible; personal access tokens are recommended because they are the simplest to set up for GitHub.) A personal access token is an alternative to using a login and password each time you connect to GitHub. Once you set up the token, GitHub will recognize your computer and know that you are YOU each time you connect to it from the shell. 6. Notify the lab manager so that you are now ready to be added to the NDCLab organization on GitHub. Continue with the next step while you wait. (Note: when you receive the invitation to join the organization, please make your membership `public`. If you accidentally set your membership to `private,` don't stress: simply navigate to the People tab from the main NDCLab page, then change the dropdown next to your own name from `private` to `public`.) 7. Start with [this video](https://www.youtube.com/watch?v=DVRQoVRzMIY) by Tech With Tim, which offers a broad overview of Git and GitHub while showing you both the command line interface and the GitHub interface. Do not worry about digesting *everything* that he shows in this video, but rather focus on learning the big picture lessons: key terminology, core concepts, and the commands he uses most frequently. 8. Take the [quiz](https://forms.gle/B83WY7q1wWkpZtKV6). 9. Work through [this hands-on tutorial](https://lab.github.com/lmachens/git-and-github-first-timers) inside GitHub. Once you are signed into GitHub and connected, click \"Start free course.\" Complete the activities from #1 (\"What is GitHub?\") through #6 (\"Communicating Using Markdown\"), then head back over here and continue to #10 below. (The remaining activities on the GitHub tutorial are not necessary to complete the Get with Git program.) 10. Watch [this video](https://youtu.be/4nEAxtKvrQE) where the lab manager gives you a tour of the NDCLab wiki and takes you through the steps to update your entry on the who's-who page. 11. Time to put it all together! Update your entry on the wiki's who's-who page using the new commands you've just learned: `git clone | ` `git branch whos-who-[yourname]` `git checkout whos-who-[yourname]` `git add whos-who.md` `git status` `git commit -m \"Add [yourname] to who's-who\"` `git push origin whos-who-[yourname]` Don't forget to: * Create your own branch, off the main branch, entitled \"whos-who-[yourname]\" (without the brackets). * Switch to your branch before you start making any changes! * Resize your photo to 100 x 100 pixels and copy it into the \"whos-who\" folder within \"_assets\". (If you cannot find your Home folder on Mac, type cmd+shift+H inside Finder.) * Name your photo simply as your last name. This way, you can reference it with `![name](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/name.jpg)` * Nest your entry under your lab title, alphabetically by last name. * Push all your changes back to the remote. * Create a pull request and tag the lab manager (you can find the lab manager's GitHub handle on the page you just updated!) to review your changes and merge them into the live wiki! 12. After the lab manager has merged your changes, you have one more important mission. Review the wiki and identify (at least) one improvement, in a different section of the wiki, that you think would help a future lab member. * Within your wiki folder, switch back to the main branch: `git checkout main` * Update your main branch with any new changes from other lab members: `git pull` * Create a new branch off the main branch and name it in accordance with the lab's [naming conventions](https://ndclab.github.io/wiki/docs/etiquette/naming-conventions.html#github): `git branch feature-[improvement]-[yourname]` * Switch to your new branch: `git checkout feature-[improvement]-[yourname]` * Navigate within the wiki folders, using `cd` and `ls`, to open the file(s) where you will implement your suggestion. * Add your modified file(s) to your staging area: `git add [filename]`. * Commit your changes, push to the remote, and submit a new pull request to the lab manager! 13. Some final thoughts to maximize your use of GitHub: * **DO** be careful in customizing your notifications. You want to see every time someone @mentions you or assigns an issue to you, and you don't want those messages to be lost in a sea of other, less important notifications. Think of GitHub as being another inbox to monitor or, alternately, treat the automatic GitHub notifications that hit your e-mail inbox as actionable messages. * **DON'T** worry about breaking something. You can always clone a repository, make suggested changes, and tag someone on a pull request. The worst that can happen is that they disagree! * But **DON'T** forget to create and checkout to a *new* branch. Never make your changes directly on main. * **DO** think about who should review your work before it is integrated into the main branch. Feel free to start a conversation with a pull request, even if you aren't ready for a final merge. ",
    "url": "/docs/Onboarding/get-with-git.html",
    "relUrl": "/docs/Onboarding/get-with-git.html"
  },"14": {
    "doc": "Git + GitHub",
    "title": "Git + GitHub",
    "content": "### Contents 1. [Overview](#overview) 2. [Installing Git](#installing-git) 3. [Authenticating to GitHub](#authenticating-to-github) 4. [Notifications](#notifications) 5. [Basic Commands](#basic-commands) 6. [Markdown](#markdown) 7. [SCM Best Practices](#scm-best-practices) 8. [Git Cheat Sheet](#git-cheat-sheet) 9. [Additional Resources](#additional-resources) ## Overview [Git](https://en.wikipedia.org/wiki/Git) is an [open source](https://opensource.com/resources/what-open-source) version control system. A version control system is a piece of software that allows you to track changes in text files over the development lifetime. [GitHub](https://en.wikipedia.org/wiki/GitHub) is an online platform that allows people to host Git repositories (that is, version controlled projects) online so that other team members and community members have easy access to those repositories. GitHub also offers several additional services like issue tracking, actions, and project boards which we use to manage lab projects. Since the lab is dedicated to [open science](https://opensource.com/resources/open-science) and all projects are open source, GitHub provides these services for free. Git is used as the main way to version control projects within our lab. Projects have [branches](https://www.hostinger.com/tutorials/how-to-use-git-branches/), which are similar to sandboxes where a contributor to a project can safely make changes before requesting that their changes be reviewed by a colleague and ultimately added to the main project. Git also provides utilities to display the changes that have been made to a specific branch, show how files have been edited, and output a log of all changes. All changes are tagged with the author and time to help contributors understand how and when a feature (beneficial change) or a fix (change that corrects a problem) was added. GitHub is where we will store these repositories. There are several alternatives that provide similar features or features that GitHub does not have. The reason that we picked GitHub over its alternatives (like [GitLab](https://about.gitlab.com/) or [BitBucket](https://bitbucket.org/)) was due to GitHub's particular feature set, industry and community usage, and available resources, primarily: usage of Git, issues workflow, and first- and third-party project management utilities. This Git tutorial focuses on using the [command-line interface](https://en.wikipedia.org/wiki/Command-line_interface) (CLI) tool. We will not be covering any [GUI](https://en.wikipedia.org/wiki/Graphical_user_interface) clients because these clients can differ in looks and navigation across operating systems and may be frequently updated whereas the CLI tool has the same interface across operating systems and rarely changes in appearance. (Plus, it's very handy to know how to use the command line!) ## Installing Git **Mac** 1. Open Terminal, which is your built-in shell. If you haven't don't this before, start [here](https://ndclab.github.io/wiki/docs/technical-docs/shell.html). 2. Install Homebrew by following the [instructions on the Homebrew homepage](https://brew.sh/) to paste a specific command into your Terminal. (When it asks for your sudo password, input the login password for your Mac and hit `Enter`. It won't look like you are typing anything on the screen, but you are!) 3. Still inside your Terminal, type: `brew install git` 4. If you encounter issues, check out the [main download page](https://git-scm.com/download/mac), direct from Git. **Windows** 1. Determine whether your computer is 32-bit or 64-bit. This information is available in your system settings under \"About.\" If you don't know where to find this, do some quick googling. 2. [Download](https://git-scm.com/download/win) the appropriate version for your computer's system type. 3. Install as you would any other application. **Linux** Use the package manager that comes with your distribution and install `git`. See specific instructions [here](https://git-scm.com/download/linux). ## Authenticating to GitHub When working in the shell and pushing your work to GitHub, GitHub needs to know who you are. This means you must \"authenticate\" yourself to the platform. You can do this one of three ways: * inputting your username and password every time (very onerous and therefore not recommended!) * using SSH keys (preferred for the [hpc](https://ndclab.github.io/wiki/docs/technical-docs/hpc-doc.html)) * creating a personal access token (easiest option for GitHub) For simplicity, the personal access token is recommended. Authenticate by following [these simple instructions](https://docs.github.com/en/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token), directly from GitHub. For details on other authentication options, check out [this resource page](https://docs.github.com/en/github/authenticating-to-github). ## Notifications You can control whether GitHub sends you web notifications, e-mail notifications, or both when you are @mentioned inside GitHub. In this way, when someone tags you on GitHub, you will receive an e-mail, and you will also be able to access the message from the 🔔 icon in the top-right corner of the GitHub webpage. To ensure that you see these messages (especially when you are first learning GitHub), it is recommended that you select both \"Email\" and \"Web and Mobile\" under the Notifications tab of your Account Settings. ## Basic Commands Git has several common commands that will be necessary to properly work with the the lab's repositories. These are `status`, `add`, `commit`, `push`, `pull`, and `checkout`. ### `status` This command is your best friend. It will list files and their state within git. Use it often! Files can either be ignored, untracked, unstaged, or staged. *Ignored* means that the file satisfies a rule in the `.gitignore` file and Git pretends it isn't there. *Untracked* refers to files that Git is not ignoring but have never been committed; this is normal for newly created files. *Unstaged* files are tracked files that currently have changes but haven't been placed in the staging area for the next commit. *Staged* files are ready for the next commit. Example: ```sh git status ``` ### `add` This command will add any file (tracked or untracked) to the staging area for the next commit. Example: ```sh git add some_file.txt ``` ### `clone` This command creates a clone of the remote repository on your local machine so that you can make changes (which you will ultimately upload back to the remote repository to share with collaborators). Example: ```sh # in local folder into which you want the copy the GitHub contents git clone | # new folder is added to your local folder ``` ### `checkout` This command changes the contents of the local repository to match the branch that you \"checkout\". It will leave changed files untouched so that you can commit them to the branch you are checking out. This is useful when you accidentally made changes to \"branch\\_b\" thinking you were on \"branch\\_a\". Example: ```sh # on branch_b git checkout branch_a # on branch_a # changes were brought over ``` ### `commit` This command will commit your changes to the repository. There are two important options for commit `-m` (required) and `-a` (optional). * `-m` is for adding the commit message, which you should always do * `-a` means that git will automatically add any tracked files to the staging are and include in your commit (even if you forgot to add them to the staging area yourself). If you don't always check `git status` before you commit, you may want to use `-a` to ensure you don't leave changes behind. Example: ```sh # Staged files: s.txt # Unstaged files: u.txt # Untracked and unstaged files: uu.txt # first example git commit -m \"Update s file\" # Commits only changes for s.txt # Reset # Second example git commit -am \"Update s and u file\" # Adds u.txt to staging area # Commits changes for s.txt and u.txt ``` ### `push` This command will push all committed changes from your local computer to the remote repository. Example: ```sh # Your working branch is feature-joe git push origin feature-joe # Changes are uploaded from your local to the remote ``` ### `pull` This command will \"pull\" changes from the remote repository to your local. Pull will try to fetch any new changes and merge them. Generally, as long as you have not diverged from the remote repository this will work fine. Example: ```sh # Local repository is behind remote repository but has not diverged git pull # Git will download new changes and merge them automatically ``` ## Markdown GitHub supports [markdown](https://en.wikipedia.org/wiki/Markdown), which allows you format text in text-based .md files so that GitHub renders them beautifully online. The [Get with Git training](https://ndclab.github.io/wiki/docs/Onboarding/get-with-git.html) includes a module on markdown. Here are some other helpful guides: [GitHub Guide to Mastering Markdown](https://guides.github.com/features/mastering-markdown/) [GitHub Markdown Cheatsheet](https://guides.github.com/pdfs/markdown-cheatsheet-online.pdf) ## SCM Best Practices When working with Git and GitHub for the lab, remember these best practices for source code management (SCM): ### Commit often. Don’t make too many changes without commits, since it can be destructive if one change within the commit is bad. Commit often and leave a detailed comment about what part of the code was changed. ### Check your version. Make sure you are working on the latest version. Use the latest version to avoid accidentally changing an old version and causing confusion. ### Be obsessive about note-taking. Make detailed notes/comments about everything you do. This should be 2-3 sentences that thoroughly describe the changes made (what was changed, why it was changed, etc.). >Example: >Added indentation on Line 13 for readability. >Corrected error, changed dog.jpg to dog.jpg on Line 27. ### Review changes before committing. Be 100% sure you want to commit the changes made before doing so! ### Use branches. Work independently but communicate what you are working on by creating a new branch and naming it according to the lab's nomenclature. ### Agree on a team workflow. Decide with your team who is editing code, what they are editing, and why they are editing. Communicate frequently to stay on track. ## Git Cheat Sheet | Command | Description | --- | --- | `ls` | Checks your current path | `cd` | Change your directory | `git branch [BRANCH NAME]` | Creates a new branch | `git checkout [BRANCH NAME]` | To actually enter a branch | `git status` | Checks what branch you're on. Also tells you if any changes were made to a file (i.e any unstaged changes, new commits) | `git add [PATH OF FILE(S) LOCATION]` | Adds contents to the staging area | `git commit -m \"[MESSAGE]\"` | Commits a change (check out the lab's conventions for commit messages [here](https://ndclab.github.io/wiki/docs/etiquette/naming-conventions.html#github) | `git push origin [BRANCH NAME]` | Pushes branch to the remote | General steps to make edits and push to GitHub | --- | 1. Clone the repository you wish to work on, and place it in a good location | 2. Change your directory to where you wish to work | 3. `git branch [BRANCH NAME]` | 4. `git checkout [BRANCH NAME]` | 5. Start working on files you wish to edit | 6. Use `git status` to check that the edits are being documented | 7. `git add [PATH OF FILE(S) LOCATION]` in order to stage the changes | 8. `git commit -m \"[MESSAGE ABOUT CHANGES]\"` | 9. `git push origin [BRANCH NAME]` | 10. Submit a pull request physically in GitHub | For a downloadable version of this cheat sheet, navigate to this [link](https://gist.github.com/emach039/832589670796828c230d2fd0f477ca4f). ## Additional Resources There are hundreds of Git resources available online. If you get stuck, do some targeted Googling. If you still can't find what you're looking for, ask your labmates in #tech. ",
    "url": "/docs/technical-docs/git_and_github.html",
    "relUrl": "/docs/technical-docs/git_and_github.html"
  },"15": {
    "doc": "GitHub Etiquette",
    "title": "GitHub Etiquette",
    "content": "### Contents 1. [Overview](#overview) 2. [Tools](#tools) 3. [Terminology](#terminology) 4. [Project Lifecycle](#project-lifecycle) 5. [Opening a New Project](#opening-a-new-project) 6. [Publishing a Release](#publishing-a-release) 7. [Communication](#communication) ## Overview Having an agreed-upon set of standards for how team members coordinate and collaborate on work leads to more efficient and more enjoyable workflows that yield better results with less effort. In business and software development, there is a long history of research into best practices for how teams should collaborate and coordinate their work, often collectively referred to as “project management.” There is an upfront cost to learning a new system of working together and coordinating work; however, this initial work pays enormous dividends, ultimately translating into more publications and faster deployment of code that is more widely adopted by the community. The NDCLab uses a modified [agile methodology](https://en.wikipedia.org/wiki/Agile_software_development) to organize our workflows and maximize our productivity. The core idea is that we break larger projects into smaller, iterative pieces and set ourselves time limitations on completing each of the smaller pieces. You do not need to fully understand the tenets of agile beyond the information provided on this page. If you do decide to do extracurricular reading, please be aware that we have modified some of the typical agile terminology to better meet the needs of an academic research lab. A key purpose of using this agile methodology, including the tools and processes outlined below, is to reduce the amount of time needed for meetings while keeping all team members apprised of a project's status. Initiative and self-assignment of tasks is highly encouraged, along with active collaboration to solve problems and share knowledge. ## Tools ### GitHub All lab projects live on [GitHub](https://ndclab.github.io/wiki/docs/technical-docs/git_and_github.html) and make use of native features of the platform, such as issues and pull requests. If you haven't already, [get yourself onboarded](https://ndclab.github.io/wiki/docs/Onboarding/get-with-git.html). ### ZenHub [ZenHub](https://ndclab.github.io/wiki/docs/technical-docs/zenhub.html) is a plug-in to GitHub. Issues within a GitHub repository connect automatically to the ZenHub Kanban board associated with the GitHub repository. In general, each repository is connected to one workspace, but it is possible to connect multiple repositories to a single workspace in special circumstances where this would be beneficial to project management. ### FIU HPC Data is stored on the lab's folder on the [FIU high performance computer](https://ndclab.github.io/wiki/docs/technical-docs/hpc-doc.html) and all analyses are run on the HPC. Scripts developed on GitHub are automatically mirrored on the HPC to facilitate data analysis while maintaining a git-controlled history of the script development. ## Terminology [**Agile**](https://en.wikipedia.org/wiki/Agile_software_development): a philosophy for flexible, iterative, team-centric project management [**Scrum**](https://en.wikipedia.org/wiki/Scrum_(software_development)): a framework for deploying an agile system for project management by breaking larger projects down into manageable chunks [**Kanban Board**](https://en.wikipedia.org/wiki/Kanban_board): a visual depiction of project priorities and progress **Project**: a big idea that may comprise a single research publication, multiple research publications, or the distribution of cool, open-source software [**Epic/Release**](https://help.zenhub.com/support/solutions/articles/43000010341-an-intro-to-zenhub-epics): a large narrative that is smaller than the whole project but bigger than an individual task; for example, a specific poster presentation or the beta release of a software tool [**Issue**](https://guides.github.com/features/issues/): a feature in GitHub that is a single, well-defined, cohesive task that is accomplished on the road to completing the current epic/release [**Sprint**](https://en.wikipedia.org/wiki/Scrum_Sprint): a fixed, short period of time (~1-3 weeks) into which tasks are batched and completed * **Level 1 Review**: a good-faith attempt to catch any errors when reviewing a pull request from a labmate; the reviewer is not equally responsible for the accuracy/quality of the content being merged * **Level 2 Review**: a thorough review of accuracy/quality of the content being merged in a pull request; the reviewer is equally responsible with the individual initiating the pull request (There are many other terms used in agile project management. We are focusing here on those that best describe the process used at the NDCLab.) ## Project Lifecycle Within the NDCLab, projects are conceptualized and organized across three timescales: * Project * Epic/Release * Sprint ### Project (1-3 years) Each project has a goal; this goal is what will ultimately be achieved after completing all work and releasing all papers and posters envisaged for the project. For standard projects that do not require new data collection, this timeline is typically 1-2 years. For standard projects that require the lab to collect new data, the timeline is typically 2-3 years. The project goal should be explicitly stated in the `readme` file on the project's GitHub repository. Each active project has its own GitHub repository, ZenHub workspace, folder on the HPC, and at least one assigned project lead. ### Epic/Release (4-6 months) Projects are broken down into smaller chunks, referred to as \"releases\" or, in ZenHub terminology, \"epics.\" (ZenHub also has something called a \"release.\" Pretend you didn't see that. Remember what we said above about modifying terminology? :wink:) Within the timeframe of an epic/release, some significant change or improvement should be accomplished. For a research project, this might be the publication of a poster. For a new tool, this might be an upgrade that includes a new feature. Almost all projects will involve more than one epic/release. This is to provide psychological milestones, as well as to yield somewhat self-contained products that can be deployed, presented, published, or otherwise shared with the world. The work completed during each epic/release is integrally tied to the epics/releases that precede it and the epics/releases that follow it; in this way, each epic/release helps to achieve the larger project goal. However, each epic/release should also reflect a conceptual advance upon the prior epic/release, and reflect a change that is significant enough to: * warrant a novel conference submission (in the case of a research project) or * encourage users to download the new software release (in the case of tool development). At the start of a project, all planned epic/release goals for a project should be explicitly stated in the `readme` file on the project's GitHub repository. Each planned epic/release should be established as a time-blocked \"Epic\" within ZenHub. An epic/release is considered complete when the improvement (be that a new version of a tool or a publication of some type) is pushed to the `main` branch of the project repository on GitHub. ### Issues (1-3 weeks) On a day-to-day basis, epics/releases are broken down into bite-sized chunks called \"issues.\" Issues are the primary unit of work and can be broken down into a series of sub-tasks as needed. Issues are created within the project’s GitHub repository. Sub-tasks, if helpful or required, can be listed as a simple list within the issue description. At the start of any new project, an effort is made to identify and define a majority of the issues that need to be completed to achieve the first epic/release. The issues that comprise the first release are placed in the *Release Backlog* pipeline on ZenHub and assigned to the associated ZenHub Epic. All other issues are placed in the *Project Backlog* pipeline on ZenHub (where they can optionally be assigned to an upcoming epic/release or be left unassigned). Issues inside the Project Backlog can be relatively large and abstract. However, these issues must be refined and/or broken down further prior to moving them into the Release Backlog. Completing all the work inside the Release Backlog will achieve the epic/release goal. ### Sprints A sprint is a collection of issues that the team for a given project has decided to work on within a specified 1-3 week period. Each issue should not take longer than one sprint to complete (ideally much less than that, and multiple issues will be completed during each sprint). A sprint meeting occurs at the beginning of each sprint and involves reviewing work from the prior sprint, reflecting on what did/did not work, and planning what issues will be completed during the upcoming sprint. Before being assigned to the sprint backlog, issues must: * be fully defined (specifically, what does \"Done\" look like?) * have completion time estimated (don't get bogged down in precision, just provide a reasonable estimate of task complexity and effort required) * have all subtasks defined (only if subtasks are applicable) #### Before the Sprint Meeting * All work for the current sprint should be completed >1 day before the next sprint meeting (**not** within four hours of the next meeting). * Team members should review items in the Release Backlog and add \"Add to sprint?\" labels to promote discussion. Only well-defined issues are added to a sprint, so issues being proposed at the next sprint meeting should be updated with adequate definitions if those are lacking. * An \"upcoming sprint\" issue is created, which remains in the *New* pipeline on ZenHub and serves as the agenda for the sprint meeting. All team members add their comments (>1 day prior to the meeting) to this issue to promote discussion, including: * what we tried and worked really well * what we tried and really didn't work * what we didn't give a fair try to * work that will not be completed in time * outstanding roadblocks * unexpected developments #### During the Sprint Meeting The sprint meeting is broken down into three parts: 1. **Retrospective** ( The retrospective is an opportunity to share tips and tricks so that all members of the team can learn from the experience of others. 2. **Sprint Review** (15 min: review what was completed and what remains incomplete) All items in the *Done* pipeline are move to the *Closed* pipeline in Zenhub and discussed as needed. There is no need to discuss everything that was completed, as this information is easily viewable to all team members on the ZenHub project workspace. However, particular issues may benefit from reporting on additional details. 3. **Planning** (60 min: plan work for the next sprint) The Sprint Backlog in ZenHub is stocked with the issues that will be accomplished during the next sprint. By the end of the meeting, all issues should have a time estimate and 75% of the issues should be assigned to specific team members (the remaining 25% can be handled by self-assignment during the sprint). All high-priority items must be assigned; lower-priority items can be self-assigned during the sprint. As part of the planning process, the time estimates should be added together to ensure that a reasonable amount of work has been tagged for the sprint. Once issues are added to the Sprint Backlog, remove the \"Add to sprint?\" label to remove unnecessary visual noise on ZenHub during the sprint. #### After the Sprint Meeting Team members tackle the issues to which they have been assigned, moving the issues into the *In Progress* pipeline on ZenHub. Ad hoc meetings, impromptu discussions, and the labeling of issues with \"Help Wanted\" labels are all highly encouraged to ensure team members don't get caught up in roadblocks that slow progress. It is normal to hit roadblocks and it is therefore important to communicate these openly so that more minds can be involved in finding an elegant solution. When an individual completes an issue, they move it into the *Review/QA* pipeline on ZenHub and request a review. In most cases, the process of reviewing and approving work on issues involves the preparation of content to be merged with an upstream branch (such as `dev` or `dev-[feature]`). Therefore, the individual who has completed work on the issue initiates a pull request for their working branch, tagging one of the project leads to review the suggested content prior to merging it with the upstream branch. A level 1 review is required; a level 2 review is encouraged whenever possible. The [Contributing page](https://ndclab.github.io/wiki/docs/contributing.html) of the wiki contains a helpful graphic. Following review and approval, an issue should be moved to the *Done* pipeline on ZenHub (but not closed until the next sprint meeting). Once all of an individual's tasks for the sprint are completed, they are expected to review the ZenHub workspace and: * Self-assign any unassigned tasks in the current sprint. * Reach out to any teammates who have posted a \"Help Wanted\" label. ### Presentation and Feedback For each epic/release, plan on putting together a work-in-progress presentation, to be given at a lab meeting or similar event. These presentations serve as a way to organize thinking regarding the status of the release and the larger project. This is also a chance to receive feedback. Typically, the presentation will occur in the second half of the epic/release, and most often, near the end (or just after completion) of the epic/release. Pending the venue, project status, and other particulars, this may be a very informal presentation with minimal slides or a formal presentation. ## Opening a New Project New projects should be based on the NDCLab templates. Visit [this page](https://ndclab.github.io/wiki/docs/etiquette/github-templates.html) for details. The `main` branch is reserved for \"published\" information, such as pre-registrations, posters, publications, and official releases of validated software tools. The `dev` branch reflects the most up-to-date version of the current release. Since all work will eventually be merged onto `dev` (before an ultimate merge onto `main`), all new branches should be created by branching off `dev`. More information is available on the [naming conventions page](https://ndclab.github.io/wiki/docs/etiquette/naming-conventions.html#github). ## Publishing a Release At certain stages of each project, information will be ready for public consumption. Since the NDCLab is an open lab, all of our work-in-progress is publicly available. However, we make a clear distinction to show visitors from outside our lab what we consider \"done\" by pushing this content to the `main` branch. To \"publish\" a release on GitHub: 1. The project lead(s) should ensure that the `dev` branch is fully ready to deploy. This means that all content that is being \"published\" is well-organized and independently verified. (It is ok that some parts of future releases may still be in-progress.) 2. The project lead(s) initiate a pull request, tagging the lab director for a level 2 review. He may review personally or delegate the review. Once `dev` is merged to `main`, this completes the current epic/release. The ZenHub *Release Backlog*, *Sprint Backlog*, *In Progress*, *Review/QA*, and *Done* pipelines should all be empty and all the issues that were tackled during the epic/release should be closed. The next epic/release is initiated by moving the Epic tile for the next planned epic/release and its associated issues into the Release Backlog. ## Correcting Data If an error is discovered in a dataset, the data will need to be corrected while maintaining traceability on the previous (uncorrected) version of the dataset. Detailed instructions are available in the `sourcedata/` folder of the [template-dataset](https://github.com/NDCLab/template-dataset) repository. Notify project leads for all analyses that are known to have used the dataset. If your analysis is potentially impacted by the error: * Ensure that you referenced a specific commit in your `input/` folder. * Re-run your code on the corrected dataset and check the results against your previous results. ## Communication * Watch your notifications so that you respond in a timely manner when someone @mentions you or asks you to review a pull request. * When assigning someone to an issue, include an explanatory comment (with @mention) to explain why you think the person is a good fit for the task -- don't just randomly assign people issues without dialogue. * Use the \"question\" and \"help wanted\" labels to communicate to the broader team that you are stuck and need assistance. ",
    "url": "/docs/etiquette/github-etiquette.html",
    "relUrl": "/docs/etiquette/github-etiquette.html"
  },"16": {
    "doc": "GitHub Templates",
    "title": "GitHub Templates",
    "content": "### Contents 1. [Overview](#overview) 2. [Setting Up a New Project](#setting-up-a-new-project) 1. [GitHub](#github) 2. [ZenHub](#zenhub) 3. [Slack](#slack) 4. [HPC](#hpc) 5. [Google Drive](#google-drive) 6. [Off to the Races](#off-to-the-races) ## Overview All new projects require the creation of a new Github repository by the lab manager or lab technician. New project repositories are typically initiated using one of the template repositories available in GitHub (template-tool, template-dataset, or template-analysis). Approval from the lab director is required prior to opening a new project repository. Each lab project requires time and resources, so the balance across the lab must be carefully maintained to ensure that each project is a success. ## Setting Up a New Project ### GitHub #### Start with [brainBox](https://github.com/NDCLab/brainBox). This is where all great ideas get incubated. If you believe that the brainBox process is not appropriate for your idea, talk to the lab manager or PI. #### Create a new repo. When you get the green-light from the lab director, ask the lab manager to create a new repo using the appropriate template repository: * data collection projects: https://github.com/NDCLab/template-dataset * data analysis projects: https://github.com/NDCLab/template-analysis * tool development: https://github.com/NDCLab/template-tool Be sure to tell the lab manager: * the appropriate name for your new repository (which meets the requirements for [project naming conventions](https://ndclab.github.io/wiki/docs/etiquette/naming-conventions.html)) * a pithy description of the project that will appear on the main lab GitHub page * who will be leading the project and who will be part of the initial project team (so that everyone gets the correct access level on the new repository) #### Prepare your new repo for use. Before you begin using your new repository, there are several settings that need to be implemented: ##### 1. Create `dev` branch. Create a new branch named `dev` off the basis of the `main` branch. This is identical to how you created your own branch for updating the wiki who's-who page with your own information when you were [onboarded to GitHub](https://ndclab.github.io/wiki/docs/Onboarding/get-with-git.html). ##### 2. Add branch protection rules to `main` and `dev` branches. Inside your repository on GitHub, click the 'Settings' button and select 'Branches' from the left-hand menu. You will need to \"Add rule\" twice, once for `dev` and once for `main`. In both cases, select \"Require pull request reviews before merging\" and set the number of required approving reviews at \"1.\" Once complete, your branch protection rules should look like this: ![gh_branch-protection](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/gh_branch-protection.png) These branch protection rules ensure that content must undergo a review before any branch is merged into `dev` or `main`. ##### 3. Automatically delete head branches You will want to [check this option in your repository settings](https://docs.github.com/en/github/administering-a-repository/configuring-pull-request-merges/managing-the-automatic-deletion-of-branches) so that, when you review and merge the work of team members into `dev`, GitHub automatically deletes the branch they were working on (which has now been merged). This keeps your branch tree tidy. Don't worry: the branch protection rules you set up above prevent `dev` from being automatically deleted when it gets merged to `main`. #### Draft the `readme` file. Within the `dev` branch, draft the `readme.md` file that guides the development of your project. Every repository should have a succinct `readme.md` file that serves as a roadmap for the project. This is the first thing you will commit to your new repository. The readme should include: * a description of the project goal * a roadmap for all the planned project releases * major contributors to the project The template repository used to create your new project repo contains a template `readme.md` file that will guide you through the initial process of drafting the readme. As the project progresses, the readme must be updated to include information for any content included on the `main` branch, such as pre-registrations, conference posters, or working software releases. #### Draft the `contributing` file. Within the `dev` branch, draft the `contributing.md` file that informs visitors of how to contribute. The template repository used to create your new project repo contains a template `contributing.md` file that will guide you through the initial process of drafting. At this initial setup stage, the `main` branch will be empty (except for the files that came with the default template, such as the license). The `dev` branch, however, will now contain your `readme.md` and `contributing.md` files. #### Request the launch review. Once you are satisfied with the `readme` and `contributing` files, initiate a pull request. Tag both the lab director and the lab manager. * The lab director will perform a [level 2 review](https://ndclab.github.io/wiki/docs/etiquette/github-etiquette.html#terminology) (or delegate such a review to another appropriate lab member) to approve your planned roadmap and merge `readme.md` and `contributing.md` to `main`. * The lab manager will confirm that your repository is set up with all the correct settings to ensure a smooth project launch. ### ZenHub While you wait for approval of your planned roadmap, you can set up ZenHub. 1. Click the ZenHub tab within your new repository. This automatically opens a page so that you can set up a new ZenHub workspace. Input your project name as the workspace name and the short descriptor. ZenHub automatically connects to the GitHub repository where you started. Click \"Create Workspace.\" ![zh_new-workspace](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/zh_new-workspace.png) 2. Unfortunately, ZenHub does not automatically use the NDCLab's default pipelines when creating a new workspace, so you will need to customize your new workspace immediately. Adjust pipeline names and descriptors to match the table [here](https://ndclab.github.io/wiki/docs/technical-docs/zenhub.md#tour-of-the-pipelines). You can change the names and descriptors by clicking the three vertical dots at the top of each pipeline. This same menu lets you delete any unnecessary pipelines. Additional pipelines can be added at the far right of the screen, then dragged-and-dropped into the appropriate position. 3. Create a [ZenHub Epic](https://ndclab.github.io/wiki/docs/technical-docs/zenhub.md#defining-epics) for each planned project release, as outlined in your readme roadmap. 4. Plan project issues (which may be large and abstract at this stage) and assign them to the appropriate Epic. 5. Organize the Project Backlog pipeline in ZenHub by putting the earliest Epic at the top, followed by its associated issues in priority order. This is followed by the next earliest Epic with its issues, and so on. 6. Launch the first Epic by moving the \"Epic\" issue and its associated issues to the *Release Backlog* in ZenHub. ### Slack When you request the new repo from the lab manager, a new Slack channel will be created. Appropriate permissions will be granted to the project lead(s) and other project team members. ### HPC When you request the new repo from the lab manager, project-specific folders will also be created on the HPC using the standard NDCLab filing structure. Appropriate permissions will be granted to the project lead(s) and other project team members. ### Google Drive When you request the new repo from the lab manager, a project-specific folder will also be created on the Google Drive. Appropriate permissions will be granted to the project lead(s) and other project team members. ### Zotero When you request the new repo from the lab manager, a project-specific folder will also be created on the lab's Zotero group. ### Off to the Races Once the lab director has approved your planned roadmap and merged it into `main`, you have set up the project's ZenHub workspace, and your project has been added to the HPC, Google Drive, and Slack, you are ready to launch. Set up your [sprints inside ZenHub](https://ndclab.github.io/wiki/docs/technical-docs/zenhub.md#planning-sprints) and plan your first sprint meeting with your team! ",
    "url": "/docs/etiquette/github-templates.html",
    "relUrl": "/docs/etiquette/github-templates.html"
  },"17": {
    "doc": "HPC",
    "title": "HPC",
    "content": "![dt2-racks-from-front](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/hpc/server_image.jpg) *Not the FIU cluster* ## Overview The [FIU High-performance computing (HPC) cluster](http://ircc.fiu.edu/) is a group of interconnected computers designed to perform computationally expensive tasks. This includes processing and storing large quantities of data, executing programs in parallel, and running automated actions that assist in the research process. Listed below are contents that detail how to access and properly utilize this resource, **assuming an HPC account is granted**. Lab members must be [onboarded to the HPC](https://ndclab.github.io/wiki/docs/Onboarding/accessing-hpc.html) by the lab manager. To get started on logging in, click on \"Accessing\" below. ",
    "url": "/docs/hpc",
    "relUrl": "/docs/hpc"
  },"18": {
    "doc": "Home",
    "title": "Home",
    "content": "# Neural Dynamics of Control (NDC) Lab Wiki Welcome to the Neural Dynamics of Control (NDC) Lab Wiki. This wiki is the main source of documentation for researchers and developers contributing to the lab. For further information about the NDCLab, please visit our [external website](http://www.ndclab.com/). [View on GitHub](https://github.com/NDCLab/wiki){: .btn .btn-primary .fs-5 .mb-4 .mb-md-0 .mr-2 } ### Our Contributors . {% for contributor in site.github.contributors %} | {% endfor %} . ",
    "url": "/",
    "relUrl": "/"
  },"19": {
    "doc": "Instruments",
    "title": "Instruments",
    "content": "![robots in a factory](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/inst_automation-header.jpg) *Basically what instruments does, but without the robot or the factory or the chips.* Self-administered surveys are a popular method of research, and are used to measure certain metrics that pertain to participant emotional states or opinions. But their excessive utility is often matched by their excessive analytical tedium. Imagine you have 150 participants that filled multiple surveys on paper. This would involve scoring by hand, a hardly interesting endeavor to take on while conducting research. A solution would be to collect data via the internet and then apply code to automatically generate metrics. The `instruments` repository aims to accomplish exactly that. ### Contents 1. [Overview](#overview) 2. [Usage](#usage) 3. [Adding New Instruments](#adding-new-instruments) ## Overview The instruments repository is a collection of coding scripts that interpret a .json file and construct a unique survey object, which is then used to automatically score any input, as provided by the command line. _For the less comp sci savvy_: the instruments script will automatically code the questionnaires that you have participants complete into the standard total scores and subscores. ## Usage ### Study Setup: Using an Existing Instrument 1. Clone the repository to your local machine. 2. Use the published PDF for submission to the FIU IRB. 3. Import the .zip to REDCap. Note that the .zip file uses `_s1_r1_e1`. These numerical values may need to be adjusted to meet the specific needs of your study's protocol; this requires changing the numerical values in the instrument name (within REDCap) and also the numerical values **in each variable**. No other change should be made to the variable names: other changes will break the link with the automated scoring script. See further details on the lab's [naming conventions for REDCap surveys](https://ndclab.github.io/wiki/docs/etiquette/naming-conventions.html#redcap). 4. Save REDCap data to the HPC in accordance with your data collection protocol. ### Preprocessing Data 1. Log into the HPC [using the Visual Node](https://ndclab.github.io/wiki/docs/technical-docs/hpc-doc.html#connecting). Launch Panther Shell Access: ![inst_open-shell](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/inst_open-shell.png) 2. You will be prompted to enter your password when the shell opens. Type in your password and hit Enter. The console will not show you that you are typing while inputting your password, but forge ahead! ![inst_input-password](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/inst_input-password.png) 3. Once you've logged into the HPC, navigate to the instruments repo located in the HPC by entering the following command: ``` cd /home/data/NDClab/tools/instruments ``` 4. We can use the script `process.sub` located in the `hpc/` folder to analyze data. First, we need to swap the string paths located below the comment that says \"edit variables here to change inputs and outputs.\" You can edit files directly from the terminal by executing `nano hpc/process.sub`. Example paths are in-place already. You will overwrite portions of each of the three lines: 1. Replace \"this-is-some-dataset\" in the `project` variable to specify which project folder the data resides in. Examples of project folders are \"rwe-dataset\" or \"memory-for-error-dataset.\" 2. Replace \"DATA\" in the `input_file` variable to specify exactly which file should be processed. 3. Replace \"DATA\" in the `output-file` variable to specify the file name you want for the processed version of the .csv. ``` # edit variables here to change inputs and outputs project=\"this-is-some-dataset\" input_file=\"/home/data/NDClab/datasets/$project/sourcedata/raw/DATA.csv\" output_file=\"/home/data/NDClab/datasets/$project/derivatives/DATA.csv\" ``` 5. Lastly you can run this script by executing the command `sbatch hpc/process.sub`. This will output data to the `output_file` path that you've specified. Happy analyzing! ## Adding New Instruments 1. Follow the lab's [GitHub etiquette](https://ndclab.github.io/wiki/docs/etiquette/github-etiquette.html) to create a new branch off dev (`dev-NewInstrumentName`). 2. Create a new directory with the instrument's short name. 3. Add all of the following to the new directory: the published PDF, the REDCap PDF (shows exactly what participants see), and a REDCap import .zip that follows the lab's [naming conventions](https://ndclab.github.io/wiki/docs/etiquette/naming-conventions.html#redcap). All REDCap import .zip files in the instruments repository should use `_s1_r1_e1`. 4. Add the (sub)score(s) for the instrument to the .json file with the appropriate parameters as described in subscore.py for subscale scoring. 5. Add the instrument, alphabeticaly, into the list-of-instruments.md with a link to the appropriate citation. 6. Push your branch to the remote, then open a PR and assign to the lab manager. ",
    "url": "/docs/technical-docs/instruments.html",
    "relUrl": "/docs/technical-docs/instruments.html"
  },"20": {
    "doc": "Job Submission",
    "title": "Job Submission",
    "content": "For anything that goes beyond running basic lines of code, a job must be submitted to the compute nodes so that the compute nodes can properly handle tasks. Note, this is a **requirement** on the HPC, as login nodes are not the intended resource for computation. To create a job, a [slurm](https://slurm.schedmd.com/documentation.html) file must be created. The file below represents a sample Slurm script where a conda base environment is being activated: ```yml #!/bin/bash #SBATCH --job-name=myjob # create a short name for your job #SBATCH --nodes=1 # node count #SBATCH --ntasks=1 # total number of tasks across all nodes #SBATCH --time=00:01:00 # total run time limit (HH:MM:SS) #SBATCH --mail-type=end # send email when job ends module load miniconda3-4.5.11-gcc-8.2.0-oqs2mbg conda exec -b base python sample.py ``` ",
    "url": "/docs/hpc/jobs.html",
    "relUrl": "/docs/hpc/jobs.html"
  },"21": {
    "doc": "Lab Culture",
    "title": "Lab Culture",
    "content": "### Why are we here? Our lab has two primary goals: 1. To do great science that is fascinating at a basic level, but has enormous applied value to society as well. 2. To improve and develop our own skills and knowledge. ### Research Agenda The research agenda of the NDCLab focuses on cognitive control, guided by three interrelated questions: 1. What is cognitive control (across three levels of analysis)? 2. How does cognitive control develop (across adolescence)? 3. How does cognitive control relate to social behavior and social anxiety? ### Open Lab Concept The NDCLab is an open lab. This means that we perform our work openly, with all aspects of our research and project management viewable by the public (via GitHub, ZenHub, etc.). Openness is one of [our community values](https://ndclab.github.io/wiki/docs/around-the-lab/community-standards.html) and we believe that we can better work in the public interest if we do our science in the public eye. ",
    "url": "/docs/welcome/lab-culture.html",
    "relUrl": "/docs/welcome/lab-culture.html"
  },"22": {
    "doc": "Lab Meetings",
    "title": "Lab Meetings",
    "content": "## Lab Calendar The lab maintains a shared Google calendar, to which lab members are granted access during [formal onboarding](https://ndclab.github.io/wiki/docs/Onboarding/overview.html). This calendar provide a broad view into ongoing lab activities. ## Weekly Lab Meeting A one-hour lab meeting is held weekly. All lab members are encouraged to attend, but attendance is not mandatory for junior members. All lab meetings are recorded so that they can be attended asynchronously. * Agendas are posted the week prior on GitHub. * The lab manager messages on the Slack #general channel, starting with: `Lab Meeting | yyyy-mm-dd`; this post includes a link to the GitHub agenda. * Following the meeting, the lab manager adds meeting notes and a link to the meeting recording on the same thread. * The lab manager's posts for the most recent lab meeting and the next upcoming meeting are always pinned to the #general channel in Slack. * Older posts can be found by searching within Slack: ``` lab meeting in:#general ``` ## Other Meetings The lab director, lab manager, lab technician, and project leads may schedule activities on the lab calendar. Only required attendees should receive individual invites to such meetings, so that they also appear on the individual's personal calendar. However, since all lab members have access to the calendar, they can see the existence of any upcoming meeting and request to join in, if so desired. ",
    "url": "/docs/around-the-lab/lab-meeting.html",
    "relUrl": "/docs/around-the-lab/lab-meeting.html"
  },"23": {
    "doc": "Lab Structure",
    "title": "Lab Structure",
    "content": "## Lab Structure The graphic below provides an overview of the key lab processes involved in scientific research activities, the creation of software tools, and the personal development of lab members. ![process-flow-diagram](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/welcome/process-flow-diagram.png) ",
    "url": "/docs/welcome/lab-structure.html",
    "relUrl": "/docs/welcome/lab-structure.html"
  },"24": {
    "doc": "Matlab",
    "title": "Matlab",
    "content": "### Contents 1. [Running Matlab](#Running-Matlab) 1. [Running](#Running-Scripts) 2. [Matlab GUI](#Matlab-GUI) ## Running Matlab To run scripts in the Matlab programming language using the login node, follow the steps listed below: ### Running To run your matlab script, execute the following command in your terminal. ``` sh /home/data/NDClab/tools/lab-devOps/scripts/matlab/rmat.sh [--parallel] ``` Optionally, you can attach the *--parallel* flag to specify that this job requires parallel processing. This will generate an sbatch script, submit it, and return an output to your folder location. After you initially run `rmat.sh`, you should subsequently run the sbatch file generated in your folder via: ``` sbatch .sub ``` ## Matlab-GUI ",
    "url": "/docs/hpc/matlab.html",
    "relUrl": "/docs/hpc/matlab.html"
  },"25": {
    "doc": "Naming Conventions",
    "title": "Naming Conventions",
    "content": "### Contents 1. [Overarching Philosophy](#overarching-philosophy) 2. [General Naming Guidance](#general-naming-guidance) 3. [Code](#code) 4. [GitHub](#github) 5. [REDCap](#redcap) 6. [PsychoPy and Pavlovia](#psychopy-and-pavlovia) 7. [Helpful Resources](#helpful-resources) ## Overarching Philosophy All naming conventions for the NDCLab are designed to be: * human-friendly (that is, they are descriptive and help us navigate all our projects) * machine-friendly (that is, they make it easy for us to use automated search methods to find what we want in the shortest time possible) * philosophically aligned with current conventions in the open science community ### Human-friendly We spend a lot of time looking at a computer screen. So we should use conventions that make things easier on our eyes. Here are some top guidelines to assist: * Get used to using lowercase letters for naming things (with a teensy exception for the occasional camelCase)--this means you never have to wonder what to capitalize because you never capitalize anything! * Build names out of \"chunks,\" which are separated by an underscore (see below for examples). * Within a chunk, separate words with a hyphen for easy reading (again, teensy exception for camelCase when space is at a premium). * Use deliberate repetition to enable efficient searching across projects and over time. ### Machine-friendly Don't confuse the machines. Recognize how computers order things by default (numerically and alphabetically) and avoid feeding them filename cryptonite. Never use: :x: spaces :x: accented characters (ñöé, etc.) :x: special characters (?!:*+, etc.) ### Open Science Conventions Our basic conventions are largely based on established standards in psychology and neuroscience, including [BIDS](https://bids.neuroimaging.io/) and [FAIR](https://www.go-fair.org/fair-principles/) principles. See the helpful resources at the bottom of this page for other useful links. ## General Naming Guidance ### Project Names Project names should be informative but concise. Words are separated by hyphens. All project names begin with a lowercase letter. Examples: >social-flanker-eeg-dataset >social-flanker-eeg-alpha In some situations, space may be limited. In such cases, hyphens may be replaced with camelCase. Examples: >brainBox >baseEEG Dataset projects **always** end with \"-dataset\": >social-flanker-eeg-dataset >readAloud-valence-dataset >putt-putt-dataset Analysis projects associated with a given dataset share the first portion of their project name. The very first analysis (that is, the main analysis planned at the time of data collection) is typically denoted \"-alpha.\" (Rare exceptions are made for the sake of playful language.) >social-flanker-eeg-alpha >readAloud-valence-alpha>br/> >putt-putt-miss Spin-off analyses retain the first portion of the project name, but utilize an informative suffix: >social-flanker-eeg-multicultural >readAloud-valence-ddm>br/> Given that future data collection spin-offs of a project are common, yet hard to predict, there is no particular effort made to associate data collection efforts in their nomenclature. For example, readAloud-valence-dataset is, philosophically, a spin-off of rwe-dataset, but this is not reflected in the nomenclature. Project names are used as top-level folder names on GitHub, REDCap, the HPC, and Google Drive. ### Folder Names The re-use of top-level folder names across projects and platforms is encouraged to simplify navigation. For instance, on the HPC, all active projects have a \"sourcedata/raw\" folder used for the storage of incoming data from study participants. Three main paradigms are employed in establishing folder naming conventions for a particular context; the choice depends upon the particular context and use case: **simple name** >sourcedata/ >code/ **chronological ordering** >2021-08-13_nsf_buzzell_theta-development/ >2021-10-05_nimh_buzzell_theta-dev-anxiety/ **logical ordering** >01_design/ >02_protocols/ >03_recruitment/ If using logical ordering, left pad your numbers with zeros, as in the examples above. Since many computer programs order items starting with the first character, this left-padding ensures that \"10\" actually comes after \"09.\" ### File Names No two files should share an identical name. Ever. File names should be built in \"chunks.\" Examples of potential chunks: * date * project name * a reflection on the document's unique content (e.g. a particular analysis or write-up) For example, here are some good file names: > 2021-06-01_social-context-alpha_prelim-analysis_anxiety > 2021-06-30_social-context-alpha_prelim-analysis_exec-function Alternately, if all files are stored within a space specific to the social-context-alpha project and you don't need to track chronology, you could use: > 01_anxiety_methods > 02_anxiety_analysis > 03_anxiety_results ### Dates (YYYY-MM-DD) Whenever dates are used, the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) convention is used to avoid any ambiguity. Examples: >1905-09-27 ([This paper](https://www.astro.puc.cl/~rparra/tools/PAPERS/e_mc2.pdf) was published on this date.) >2020-03-11 (The WHO made an [important statement](https://www.who.int/director-general/speeches/detail/who-director-general-s-opening-remarks-at-the-media-briefing-on-covid-19---11-march-2020) on this date.) ## Code In general, all lab code should align with the conventions used in [PEP 8](https://www.python.org/dev/peps/pep-0008/#naming-conventions) and [BIDS](https://bids-specification.readthedocs.io/en/stable/02-common-principles.html#file-name-structure). Always use descriptive names that will help others understand your code. Additional information on programming standards is available on the [associated wiki page](https://ndclab.github.io/wiki/docs/etiquette/programming-standards.html). ### Function and Method Names Wherever possible, functions and methods should be re-used across programs when referring to the same thing. For naming them, `lowercase_with_underscores` is used. Example: > def round_sum (num_1, num_2): > &nbsp;&nbsp;&nbsp;&nbsp;return math.round(num_1+num_2) In special circumstances where names are too long, `camelCase` can be used. ### Class Names `UpperCamelCase` is used for class names. Example: >class ImageSprite ### Constants `CAPITALIZED_WITH_UNDERSCORES` is used for constants. Example: >MAX_PARTICIPANTS = 10 ### Variable Names For naming variables, `lowercase_with_underscores` is also used. Example: > subject_name = \"bob\" ## GitHub ### Repository Names Tool repositories should be named identically to the associated project. For example: > pepper-pipeline Dataset repositories should include the project name and a \"-dataset\" marker. For example: > social-context-dataset > putt-putt-dataset Analysis repositories that rely upon an NDCLab dataset should reference the name of the associated dataset. For example: > social-context-alpha > putt-putt-miss Analysis repositories that rely upon an external dataset can use a descriptive name. For example: > adult-pre-post-theta See detailed [notes above](#general-naming-guidance) about regarding project names. ### Branch Names By default, repositories have a `main` branch and a `dev` branch. New branches are created from the `dev` branch and are named: > `dev-[feature]` For example, if Bob creates a new branch to create stimuli for an experiment, he would call it: > `dev-stimuli` If only a single individual is working on development of a given feature, then a single feature branch, as named above, will suffice. However, if multiple individuals are working on the same feature branch, then each individual's work should occur within sub-branches that are created from the `dev-[feature]` branch. For example, if Alice wants to help Bob with the `dev-stimuli` branch, she would create a new branch from `dev-stimuli` and call it: > `dev-stimuli-alice` Additionally, when Alice creates her new branch off `dev-stimuli`, Bob should also create a branch off `dev-stimuli` and call it: > `dev-stimuli-bob` (Note there are two exceptions to the above branch naming rules. The first is the wiki, which does not have a `dev` branch, and new branches are created directly off `main` according to the convention `[feature]-[yourname]`. The second exception applies to external collaborators, who do not have push access to a given NDCLab repo and therefore must make all contributions following a \"fork and pull\" model. For such external collaborators, branch naming rules still apply, with the exception that it is not necessary to append the external collaborator's name to the branch that lives, by definition, on the personal repository of the external collaborator.) ### Commit Messages Git commit messages (specifically, the commit subject line) should be concise, informative, and in the imperative tense. There is no final period. :white_check_mark: Correct typo :white_check_mark: Add counterbalancing content :white_check_mark: Optimize function X :x: Fix :x: Re-wrote the entire script so now it works right :x: added a feature. When useful, a full explanation should be added after the subject line. Example: ```yml git commit -m \"Add full commit message details\" -m \"Expanded guidance on commit messages to include full commit messages beyond the commit subject line.\" ``` ![gh_full-commit](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/gh_full-commit.png) The seven great rules of commit messages make for easy reading [here](https://chris.beams.io/posts/git-commit/). ## REDCap ### Project Names REDCap houses participant questionnaires for a given study. Due to limitations on modifying REDCap projects once data has been collected, changes to the set of questionnaires (including corrections to any existing questionnaire, addition of a new questionnaire, or deletion of a questionnaire) are handled by creating a new REDCap project. Each REDCap project utilizes the NDCLab project name, but is front-ended by the version information. For example: > 202201v0_readAloud-valence-dataset > 202203v0_social-flanker-dataset The first six digits indicate the year and month when the REDCap project was setup. The number after the letter \"v\" indicates the specific release within that month. In most cases, projects with by \"v0.\" However, in the event that a revision to REDCap is made twice within the same month, the first release is \"v0\" and the second is \"v1.\" ### Instrument Names Each element within REDCap is an \"instrument.\" These should be named: >instrument_sX_rX_eX Where: * `instrument` is the name of the instrument/survey/questionnaire, limited to 10 characters. * `sX` is the **session** number to distinguish across different time points of a longitudinal study. Sessions typically occur several weeks to years apart. * `rX` is the **run** number to distinguish logical groupings of data collection within a particular session. Runs can occur on the same day or can occur several days apart. * `eX` is the **event** number to distinguish repeated use of the instrument before and after an experimental manipulation within a given run. In the above, \"X\" is replaced by a numerical value (1, 2, 3) to indicate the ordering of data collection. For instance, in a longitudinal study, a pre-task questionnaire to establish the \"initial state\" of a participant is employed. Each instrument employed is numbered distinctly: | instrument | collection point | --- | :-- | initState_s1_r1_e1 | gathered during the initial 2021 session with the participant and as part of the first part of the study | initState_s1_r2_e1 | gathered during the initial 2021 session with the participant and as part of the second part of the study, but **before** the experimental manipulation | initState_s1_r2_e2 | gathered during the initial 2021 session with the participant and as part of the second part of the study, and **after** the experimental manipulation | initState_s2_r1_e1 | gathered during a follow-up session in 2023 with the participant and as part of the first part of that follow-up study | _Note_: When using a zip file to import an existing instrument to REDCap, the instrument name is displayed as: >Instrument SX RX EX This is also an acceptable format as data exported from REDCap automatically converts this to `instrument_sX_rX_eX`. ### Variable Names #### Scored Instruments Variable names are used in REDCap to identify the responses to specific questions asked of study participants. They are **identical to their associated instrument name**, except that `iX` is added to specify the item number. For example, the first three questions of the `initState` instrument would be named: > initState_i1\\_s1_r1_e1 > initState_i2_s1_r1_e1 > initState_i3_s1_r1_e1 By default, if a question within an instrument will require the output of subvariables, REDCap automatically appends `___X` to the end of the base variable name. For instance: > initState_i1\\_s1\\_r1\\_e1\\___1 > initState_i1\\_s1\\_r1\\_e1\\___2 > initState_i1\\_s1\\_r1\\_e1\\___3 In other cases, however, an instrument may contain sub-items that REDCap cannot automate. For these questions, the sub-item must be built into the variable name manually: > initState_i1-sub1_s1_r1_e1 > initState_i1-sub2_s1_r1_e1 > initState_i1-sub3_s1_r1_e1 #### Unscored Instruments In relatively rare but important cases, such as instruments that gather demographic data, the use of `i1`, `i2`, `i3` for item numbers will be an impediment to data analysis. For surveys that do not get scored or factored for analysis, a more informative convention should be used: > demo_sleep_s1_r1_e1 > demo_exercise_s1_r1_e1 > demo_caffeine_s1_r1_e1 ### Updating Instruments Whenever an instrument is modified (including correction of errors and re-working of questionnaires based on the natural evolution of the lab's research program), a new instrument is created. This enables the lab to track exactly which version of a questionnaire was given to a specific participant. #### Scored Instruments Scored instruments are revised by appending \"_b\" (or \"_c\", \"_d\", etc.) to the instrument name and to all variables. This must be done very precisely to ensure that the automatic scoring script continues to function as expected. Example: > instrument name: adexi_s1_r1_e1 :point_right: adexi_b_s1_r1_e1 > question 1: adexi_i1_s1_r1_e1 :point_right: adexi_b_i1_s1_r1_e1 #### Unscored Instruments Unscored instrument may either use the revisioning system described above for scored instruments (i.e., \"_b\"). In some cases, such as the initState and postTask questionnaires, it was envisaged that the lab would build up a repertoire of different versions over time. For these instruments, the letter versioning is built directly into the name: > instrument name: postTaskA_s1_r1_e1 :point_right: postTaskB_s1_r1_e1 > question 1: postTaskA_i1_s1_r1_e1 :point_right: postTaskB_i1_s1_r1_e1 ## PsychoPy and Pavlovia ### Folder and Experiment Names The folder and the name of the .psyexp file should be identical: > ft-flanker-o_s1_r1_e1 > read-aloud-val-o_s1_r1_e1 > multi-ef_s1_r1_e1 The sX, rX, and eX information follows the logic indicated in the REDCap section above. The -o flag indicates that the experiment has been designed for online use, via Pavlovia. The ft- prefix is a special prefix for the three \"FIU Toolbox\" tasks (flanker, DCCS, and n-back). ## Helpful Resources * Awesome [slidedeck](https://speakerdeck.com/jennybc/how-to-name-files) from [Jenny Bryan](https://jennybryan.org/). * Another awesome [slidedeck](https://slides.djnavarro.net/project-structure/#1) from [Danielle Navarro](https://djnavarro.net/). * [Brain Imaging Data Structure (BIDS)](https://bids.neuroimaging.io/) for organizing neuroimaging and behavioral data * [FAIR Guiding Principles](https://www.go-fair.org/fair-principles/) for scientific data management and stewardship * Psych-DS [technical specification](https://docs.google.com/document/d/1u8o5jnWk0Iqp_J06PTu5NjBfVsdoPbBhstht6W0fFp0/edit#) for psychological datasets (useful even though the project is not very active) ",
    "url": "/docs/etiquette/naming-conventions.html",
    "relUrl": "/docs/etiquette/naming-conventions.html"
  },"26": {
    "doc": "Onboarding",
    "title": "Onboarding",
    "content": "# Onboarding ",
    "url": "/docs/onboarding",
    "relUrl": "/docs/onboarding"
  },"27": {
    "doc": "Overview",
    "title": "Overview",
    "content": "## Overview Following a successful interview, a new lab member will be invited to join the internal lab team. The various onboarding steps are outlined below. Some must be completed by the incoming lab member while others are completed by the lab manager or PI. The incoming lab member should, however, be proactive wherever possible and should not hesitate to follow up with the lab manager if they have questions about their onboarding status. ## Lab Access All lab members are given access to the following: 1. **Slack:** The lab manager will send the incoming member an invite to join the [NDCLab Slack workspace](https://ndclab.github.io/wiki/docs/Onboarding/slack-setup.html) and ensure that they are invited to the appropriate channels. 2. **Lab meeting:** The lab manager will send the incoming member an invite to join the weekly lab meeting, held on Zoom. 3. **Lab calendar:** The lab manager will grant the incoming member access to view the [lab calendar](https://ndclab.github.io/wiki/docs/around-the-lab/lab-meeting.html). 4. **Google Drive:** The lab manager will send the incoming member an invite to access the lab's Google Drive folder. 5. **GitHub:** New lab members should work through the [\"Get with Git\" mini-training program](https://ndclab.github.io/wiki/docs/Onboarding/accessing-hpc.html) so that they are comfortable working with the lab's GitHub repositories. This is self-paced and can be started at any time. ## HPC Access The lab manager will request HPC access for the incoming lab member. The incoming lab member should schedule a time to attend the [HPC Onboarding training](https://ndclab.github.io/wiki/docs/Onboarding/accessing-hpc.html), currently held every Tuesday from 11 am - 12 noon EST. ## CCF Access Not all lab members are onboarded to the CCF; onboarding depends on the individual's role within the lab and the resources to which they will need access. The lab manager will inform the incoming lab member if access is required and will initiate the [CCF onboarding process](https://ndclab.github.io/wiki/docs/Onboarding/ccf-access.html). ## Project Access Once the incoming lab member has been onboarded to the lab (and the CCF, as required), the lab manager will introduce the newest member to their assigned project lead, who will onboard them to the project. ",
    "url": "/docs/Onboarding/overview.html",
    "relUrl": "/docs/Onboarding/overview.html"
  },"28": {
    "doc": "INSERT",
    "title": "INSERT",
    "content": "### Contents 1. [Overview](#overview) 2. [header1](#header1) 3. [header2](#header2) 1. [subheada](#subheada) 2. [subheadb](#subheadb) 3. [subheadc](#subheadc) ## Overview contentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontent ## header1 **subsection** contentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontent **subsection** contentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontent **subsection** contentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontent ## header2 ### subheada contentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontent ### subheadb #### subsubhead contentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontent #### subsubhead contentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontent ### subheadc contentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontentcontent ",
    "url": "/page-template.html",
    "relUrl": "/page-template.html"
  },"29": {
    "doc": "Pavlovia + GitLab",
    "title": "Pavlovia + GitLab",
    "content": "# Pavlovia + GitLab Tutorial An overview on how to get started with Git, GitLab, and Pavlovia in order to run PsychoPy projects on the browser. #### TABLE OF CONTENTS 1. [Setting up SSH Keys](https://ndclab.github.io/wiki/docs/pavlovia.html#setting-up-ssh-keys) 2. [Adding an SSH Key to Pavlovia](https://ndclab.github.io/wiki/docs/pavlovia.html#adding-an-ssh-key-to-pavlovia) 3. [Creating a Repository on GitLab](https://ndclab.github.io/wiki/docs/pavlovia.html#creating-a-repository-on-gitlab) 4. [Setting Up the Local Repository](https://ndclab.github.io/wiki/docs/pavlovia.html#setting-up-the-local-repository) 5. [GitLab Workflow](https://ndclab.github.io/wiki/docs/pavlovia.html#gitlab-workflow) 6. [PsychoJS Workflow](https://ndclab.github.io/wiki/docs/pavlovia.html#psychojs-workflow) ## Opening a Shell and Installing Git Please reference the setup instructions for Git [here](https://ndclab.github.io/wiki/docs/technical-docs/git_and-github.html). ## Adding an SSH key to Pavlovia ### Overview Now that you have an SSH key pair (the private and public key), you will need to add the public key to Pavlovia. [GitLab Guide](https://docs.gitlab.com/ee/ssh/README.html#generating-a-new-ssh-key-pair) ### Steps Login into [Pavlovia](https://gitlab.pavlovia.org/users/sign_in) using your username and password. ![](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/pavlovia_md/sshk_signin.png) At the top-right hand corner, click the drop down and select **Settings**. ![](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/pavlovia_md/sshk_settings.png) On the left side, you will see **User Settings** and a list of categories. Select **SSH Keys** ![](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/pavlovia_md/sshk_settings_category.png) With a text editor open up the ssh key file that ends with `.pub` and inside you will see a `ssh-ed25519` and a long alpha-numeric sequence and an email or username at the end. Copy the entire line. Paste it into the **Key** text box in the page that you are on. Give the key a **Title**, this can be anything as it is a name to help you remember where the key is when you have multiple keys. Press **Add key**. ![](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/pavlovia_md/sshk_input.png) Refresh and you will see the new key in **Your SSH keys (1)**. ![](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/pavlovia_md/sshk_newkey.png) ### Resources [Gitlab in-depth guide](https://docs.gitlab.com/ee/ssh/README.html#adding-an-ssh-key-to-your-gitlab-account) ## Creating a Repository on Gitlab ### Overview To create a repository, you will need to create an empty repository on the NDC Lab organization or your personal Gitlab on the Pavlovia Gitlab instance. The NDC Lab organization or group will be where we put the PsychoPy and PsychoJS projects. Your personal projects can be used for things like experimenting with changes that you may not necessarily want to push to the main repository. **Note:** Group and Organization can be used interchangeably. And repository and project can be used interchangeably. ### Accessing the NDC Lab group By default, you will be able to see the NDC Lab projects when you are logged in on the main page when you access `https://gitlab.pavlovia.org`. If not these are different ways to access the projects: - Open the **Groups** drop-down at the top of the page - Select **Your groups** - Select NDCLab Or - click this [link](https://gitlab.pavlovia.org/ndclab) ### Creating a Gitlab Project Once you are inside the group page: Press **New project**. ![](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/pavlovia_md/nproj_new.png) Name the project. Make sure that **ndclab** is selected in the **Project URL**. Write out a **Project Slug**, substitute spaces with a hyphen (-). Set to **Public**. Press **Create project**. ![](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/pavlovia_md/nproj_create.png) \\* Note: A \"[Slug](https://en.wikipedia.org/wiki/Clean_URL#Slug)\" is generally the part of a URL that comes after the domain bits. It is a nicer way to link to something instead of a long alpha-numeric string or a long directory and file combo. ### Resources [GitLab In-depth guide](https://docs.gitlab.com/ee/gitlab-basics/create-project.html) ## Setting Up the Local Repository ### Overview Setting up a local repository in our case means that we will be cloning the Gitlab repository. The repository can be empty or have a lot of work already incorporated. The process for \"setting it up locally\" is exactly the same. ### Steps - `git clone` the repository that was created. For example: `git clone git@gitlab.pavlovia.org:furcb/temp.git` - `cd repo-name` where repo-name is the name of the repository. ## Gitlab Workflow At this point, you will have a repository that is correctly configured. To begin adding changes, you must create a new branch. To create a new branch follow theses steps: - `git checkout -b fix_a` to create a new branch with the name \"fix\\_a\", change the name to match the changes you will be making. Once the new branch is created, open the PsychoPy project and start making changes to the project. After adding all the new changes, do the following: - Add all the new changes using the `add` command - Commit those changes using the `commit` command - `git push origin fix_a` to push the new branch to the remote repository under the new branch name Once you have something you want to merge with the main branch, confirm with other team members by having them pull the new branch and testing the new changes. Once the branch with the changes has been reviewed, we can add the new branch to the main branch. - Checkout the main branch by using `git checkout main` > Any uncommitted changes will be transferred into the main branch, this might make the next steps > difficult in some cases. If you would like to PERMANENTLY discard/delete those changes use `git > reset --hard HEAD` If the main branch has not been changed since the point when the new branch was created follow these steps: - Merge the new branch by using `git merge fix_a` - Do `push` to push the updated main branch to the remote repository If the main branch has been changed since the point when the new branch was created, in this case fix\\_a, follow these steps: - Use the `pull` command to pull the newest changes for the main branch - `git merge fix_a` to merge the changes from the new branch At this point if there where no conflicting changes, git will have completed the merge as if the main branch was not different from the point when you created the new branch. If there are conflicting changes, or changes that are in the same area as changes that were added to the main branch after creating the new branch, you will have to manually fix those conflicts. - Fix those conflicts - Use `add` to add those changes - Use `commit` to commit those changes - Use `push` to upload the new main branch to the remote repository **A word of warning:** most files will be simple to fix merge conflicts. The python project file for PsychoPy may be harder since it is auto-generated python code. Although as long as changes do not overlap i.e. merging changes for same components, merge conflicts should not happen and if they do they are easy to incorporate. Example merge conflict: ```sh # Contents of \"some_file.txt\" >>>>>> fix_a ``` Example resolved merge conflict: ```sh # Contents of the fixed \"some_file.txt\" This is a change in fix_a ``` ## PsychoJS Workflow ### Overview Pavlovia allows us to add the html files to the root of the project directory or to create an html directory and add those files created on export there. It is suggested to use the latter method since it is cleaner and more organized. ### Export PsychoJS project With the builder open go to \"File > Export HTML\" and the PsychoPy builder will export the html files. Using your file manager of choice, Explorer on Windows and Navigator on Mac OS, move those new files to `html/` in the project directory. Add any assets like pictures, csv's, and any other files needed for the project to run to `html/` as well. It is recommended to use `resources/` as the directory for those files. If you use a `resources/` directory in `html/` you must also use it in the root of the project. Example: ``` # Think of the html directory as a mini PsychoJS project └── psychopy_proj ├── html │ └── resources └── resources ``` ### `push` This command will push all changes that have been add to the Pavlovia Gitlab repository. Example: ```sh # Local repository is ahead of Pavlovia Gitlab repository git push # Changes are uploaded ``` ### `pull` This command will \"pull\" changes from the remote repository, in this case the Pavlovia Gitlab repository you cloned. Pull will try to fetch any new changes and merge them. Generally, as long as you have not diverged from the remote repository this will work fine. Example: ```sh # Local repository is behind of Pavlovia Gitlab repository but has not diverged git pull # Git will download new changes and merge them automatically ``` ",
    "url": "/docs/technical-docs/pavlovia.html",
    "relUrl": "/docs/technical-docs/pavlovia.html"
  },"30": {
    "doc": "PEPPER",
    "title": "PEPPER",
    "content": "![baseeegheader](https://user-images.githubusercontent.com/26397102/117209976-b958e600-adbc-11eb-8f23-d6015a28935e.png) *PEPPER in a nutshell* ### Contents 1. [Introduction](#Introduction) 2. [Pipeline Overview](#Pipeline-Overview) 1. [UML Diagrams](#UML-Diagrams) 2. [Features](#Features) 2. [Roadmap](#Roadmap) 3. [Development Guidelines](#Development-Guidelines) 1. [Submit an issue](#Submit-an-Issue) 2. [Create documentation](#Create-documentation) 3. [Contribute to the code](#Contribute-to-the-code) 4. [Containers](#Containers) ## Introduction Welcome to the PEPPER-Pipeline project! To get immediately started on collaborating, view [development guidelines](#Development-Guidelines). We welcome contributors from **all** backgrounds! The development of the PEPPER-Pipeline is focused on optimizing an automated, flexible, and easy-to-use preprocessing pipeline dedicated to EEG preprocessing. Following the optimization of import and preprocessing tools, development will focus on building out a common core of EEG processing tools to handle ERP, time-frequency, and source-based analyses. To find out more about this, view [pipeline overview](#pipeline-overview). ## Pipeline Overview The following section details the planning, motivation, and features behind the PEPPER pipeline. ### UML Diagrams *UML diagram for run, which references to run:preprocess* *UML diagram for run:preprocess* The UML diagrams above detail the discrete pipeline steps of the default `input_config.json` file: 1. `load:data` (pipeline input) A subset of raw data described in `load_data` is extracted. 2. `run:preprocess` The main script calls a series of functions, each one executing a step of the pipeline. All follow the same standard format: each feature always receives an EEG object and unpacked variables from the `params` dictionary in the main script. Additionally, each pipeline step returns an EEG object and a dictionary describing the changes that occurred to that EEG object. Motivation behind each pipeline step is described in [features](#Features). 3. `write:output` At the very last step of the pipeline, each respective output is passed to a `write` module that transforms the summed outputs into a comprehensive file. Together, the contents of `input_config.json` and `output_preproc_sub-A_ses-B_task-C_run-D_eeg.json` define all details necessary to describe (such as in the methods and results section for a journal publication) the manipulations of the pre-processing pipeline and its outputs. A long-term goal is to automate the writing of these journal article sections via a script that takes these two files as inputs. ### Features #### 1-Filter - High pass filter the data using MNE functions - Read in the \"high pass\" \"low pass\" fields from the `user_params.json` file to define filter parameters #### 2-Reject Bad Channels - Auto-detect and remove bad channels (those that are “noisy” for a majority of the recording) - Write to output file (field \"globalBad_chans\") to indicate which channels were detected as bad #### 3-Independent Component Analysis Overview: ICA requires a decent amount of [stationarity](https://towardsdatascience.com/stationarity-in-time-series-analysis-90c94f27322#:~:text=In%20t%20he%20most%20intuitive,not%20itself%20change%20over%20time.) in the data. This is often violated by raw EEG. One way around this is to first make a copy of the EEG data using automated methods to detect noisy portions of data and then remove these sections. ICA is then run on the copied data after cleaning. The ICA weights produced by the copied dataset are copied back into the original recording. In this way, we do not have to “throw out” sections of noisy data, but we are still able to derive an improved ICA decomposition. 1. Prepica - Make a copy of the EEG recording - For the copied data: high pass filter at 1 Hz - For the copied data: segment by epoch to “cut” the continuous EEG recording into arbitrary 1-second epochs - For the copied data: use automated methods (voltage outlier detection and spectral outlier detection) to detect epochs that are excessively “noisy” for any channel - For the copied data: reject (remove) the noisy periods of data - Write to the output file which segments were rejected and based on what metrics 2. ICA - Run ICA on the copied data - Copy the ICA weights from the copied data back to the pre-copy data 3. Rejica - Use automated methods (TBD) to identify ICA components that reflect artifacts - Remove the data corresponding to the identified artifacts - Write to the output file (field \"icArtifacts\") which ICA components were identified as artifacts #### 4-Segment - Segment by epoch to \"cut\" the continuous data into epochs of data such that the zero point for each epoch is a given marker of interest - Write to output file (field \"XXX\") which markers were used for epoching purposes, how many of each epoch were created, and how many milliseconds were retained before/after the markers of interest #### 5-Final Reject Epochs - Loop through each channel. For a given channel, loop over all epochs for that channel and identify epochs for which that channel, for a given epoch, exceeds either the voltage threshold or spectral threshold. If it exceeds either threshold, reject the channel data for this channel/epoch - Write to the output file (\"field XXX\") which channel/epoch intersections were rejected #### 6-Interpolate - Interpolate missing channels, at the epoch level, using a spherical spline interpolation, as implemented in MNE - Interpolate missing channels, at the global level, using a spherical spline interpolation, as implemented in MNE - Write to output file (field \"XXX\") which channels were interpolated and using what method #### 7-Re-reference - Re-reference the data to the average of all electrodes (“average reference”) using the MNE function - Write to output file (field \"XXX\") which data were re-referenced to average ### RoadMap #### Pre-release * Minimal, yet complete, pipeline implemented * Performs all standard preprocessing steps * Validated, but not optimized * Containers are stable * Testing suite is stable * Standards for community-driven contributions established * Contributor documentation * Initial governance structure and credit assignment standards established #### Release 0.1 * Modules to allow running in parallel on local or remote (HPC) controlled by the same parameters in the input_params.json file (auto-generates Slurm scripts for HPC) * Preprint posted to bioRxiv * Initial data quality assessment suite is stable * Pipeline meets/exceeds at least one commonly used and published pipeline on data quality metrics * Initial set of standard input parameters for child, adolescent and young adult data * Updated functions: * Filter * ICA * Standalone import-feature-io template * User-end documentation * Updated/refined governance structure and credit assignment standards #### Release 1.0 * Optimized for infant, child, adolescent, and young adult data * Standard input parameters available * Revised data output formats to bring in line with emerging BIDS-EEG derivatives * Expanded data quality assessment suite * Functions relying on electrode locations updated to use 3-dimensional coordinates based on age-appropriate head model * Integrated with DataLad * Verbose .log output files #### Release 2.0 * Data quality optimization module * Module for downloading remote datasets * Integrated with DataLad * GUI for generating input_params.json file * Web-based GUI and automated connection to computational resources * Expanded set of norms for standard EEG features ## Development Guidelines ### Identify Issues or Enhancements If you believe a new issue needs to be added to the [list of open issues](https://github.com/NDCLab/PEPPER-Pipeline/issues), feel free to create a new issue and select the appropriate template that suits the indicated change. ![image](https://user-images.githubusercontent.com/26397102/137004811-54e0403d-8296-4e5d-92a6-aef5386ecbbe.png) Once an issue has been created, the original author can likewise immediately assign themselves and start coding or documenting as described in [contribute to the code](#Contribute-to-the-Code). ### Contribute to the Code To get started on coding, follow the steps below. Note that you must have a GitHub account to collaborate on this project. All quoted commands are executed in your shell. 1. Fork the repo to your GitHub account by clicking on the \"Fork\" button on the top right corner of the [PEPPER repository](https://github.com/NDCLab/pepper-pipeline): 2. Clone the repository to your local machine, with `git clone` in your terminal. Be sure to replace `user` below with your own GitHub username. ``` git clone https://github.com/[user]/pepper-pipeline.git cd pepper-pipeline ``` 3. Build and activate a container using the OS-relevant files (see `containers/README.md`). 4. Switch to the branch that you plan to contribute to. * If work on this issue has already begun, then fetch and checkout the active branch and then create a sub-branch. ``` cd pepper-pipeline git checkout dev-feature-issue git checkout -b dev-feature-issue-name ``` * If this issue has not begun development, then create a new branch and then create a sub-branch. ``` cd pepper-pipeline git checkout -b dev-feature-issue git checkout -b dev-feature-issue-name ``` 5. Implement changes (commit often!). ``` git add file1 file2 git commit -m \"Attached flux capacitor\" ``` 6. After you complete all your intended commits, push changes to branch. ``` git push origin dev-feature-issue-name ``` 7. Create a [pull request](https://docs.github.com/en/github/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-a-pull-request-from-a-fork) using the GitHub GUI. ## Containers Please use the dockerfile & singularity recipe located in `containers/`. Directions on installation and usage are located in `container/README.md`. ",
    "url": "/docs/technical-docs/pepper-usage.html",
    "relUrl": "/docs/technical-docs/pepper-usage.html"
  },"31": {
    "doc": "Programming Standards",
    "title": "Programming Standards",
    "content": "![random_number](https://user-images.githubusercontent.com/26397102/124515039-73b09d80-ddac-11eb-98b4-cf4d8905dfa3.png) ### Contents 1. [Overview](#Overview) 2. [Naming](#Naming) 3. [Python](#Python) 4. [Containerization](#Containerization) ## Overview The following documentation details programming standards used by the lab for various protocols, programming languages, and tools. Standardization of the way each lab-member writes code eases [cognitive load](https://en.wikipedia.org/wiki/Cognitive_load) which directly supports debugging, code legibility, and future development. For any recommendations on practices, please feel free to directly reach out to the lab tech. ## Naming Naming conventions for functions, variables, packages, and files are discussed thoroughly in the [naming-conventions](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/etiquette/naming-conventions.html) page. ## Python - Global variables should not be used - Leave out return types and parameter types in the function header. For example, do this: ```python def funcName(a, b): ... ``` ...not this: ```python def funcName(a: int, b: int) -> int: ... ``` - Compartmentalize features into modules. - Each function should have a **single** responsibility. Functions that do multiple complex things should be broken into multiple functions. - If a function is running into >100 lines of code or contains some potentially reusable code, and is not inseparable, further decompose the function into helper functions. For example: ```python def funcName(a, b): # remove extension and other characters for file file_name1 = \"test_file.eeg\".lower().replace(\"-\", \"\").replace(\"_\", \"\").replace(\" \", \"\") file_name1 = filename[:-4] # do same for other file file_name 2= \"test_file_EXTRA.eeg\".lower().replace(\"-\", \"\").replace(\"_\", \"\").replace(\" \", \"\") file_name2 = filename[:-4] ``` ...can be decomposed into: ```python def file_standardize(fn): file_name = fn.lower().replace(\"-\", \"\").replace(\"_\", \"\").replace(\" \", \"\") return filename[:-4] def funcName(a, b): file_name1 = file_standardize(\"test_file.eeg\") file_name2 = file_standardize(\"test_file_EXTRA.eeg\") ``` - Every main feature function should contain docstrings (following [PEP 257](https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings)) that follow the format of [MNE functions](https://github.com/mne-tools/mne-python/blob/maint/0.22/mne/io/egi/egi.py#L89-L154) and describe **at most** the following: - A brief description as to what the function does. - Parameters: which inputs will be provided to the function? - Throws: which exceptions will the function throw (if any)? - Returns: which inputs will be returned, and what changes will be made to them? Example: ```python def add_up(a, b): \"\"\"A function that returns the sum of two inputs Parameters ---------- a : int any integer b : in any integer Returns ---------- a + b \"\"\" return a + b ``` This documentation should be as **non-restrictive** as possible. That is, minimize implicit preconditions (don't make assumptions on user input) and maximize implicit postconditions. This will ensure that features are resilient and break correctly and informatively when improper input is provided. Note that if the documentation for any of these categories is empty, it is not required to list it. For example, a function that returns nothing will likewise have no \"returns\" listed in the docstring. - For [documenting classes](https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings): \"docstring for a class should summarize its behavior and list the public methods and instance variables.\" Example: ```python class Dog(Animal): \"\"\"Dog class that can learn and execute tricks Instance Variables ---------- name: str the dog's name tricks: list a list of strings that contain tricks in string form Public Methods ---------- learn_trick(trick) method to take in \"trick\" and store it into tricks list do_trick() method to randomly print out a trick to console \"\"\" ``` - Avoid magic numbers. For example, do this: ```python PI = 3.14159 circumference = PI * Math.pow(radius, 2) ``` ...not this: ```python circumference = 3.14159 * Math.pow(radius, 2) ``` ## Containerization - Updates to container content should be discrete and announced events. This will prevent unexpected behavior (sudden unsupported packages, changes in kernel, etc.) in local environments. ",
    "url": "/docs/etiquette/programming-standards.html",
    "relUrl": "/docs/etiquette/programming-standards.html"
  },"32": {
    "doc": "Python CI Workflow",
    "title": "Python CI Workflow",
    "content": "# Python CI Workflow Continuous Integration is the practice of automatically merging developer work that has been checked by tools into a main branch of work in a [Version Control System](https://en.wikipedia.org/wiki/Version_control). This is necessary to check code for correctness when it is added to the repository and that it meets the Lab's guidelines. This is a very useful way to make sure that the data that is being generated by the program or script is trustworthy. ## Overview [GitHub Actions](https://docs.github.com/en/free-pro-team@latest/actions) is a tool available to GitHub projects and is used to perform Continuous Integration (CI) tasks. Tasks include [linting](https://en.wikipedia.org/wiki/Lint_(software)) code and checking if the code complies with lab styling standards. For python, we will use [pylint](https://pylint.org/) a linter which will test code for syntactic errors and [pycodestyle](https://github.com/pycqa/pycodestyle) or a style checker for compliance with the lab code style guide. These are the two checks that will be used on all projects that contain Python code. ## Using GitHub Actions on a Repository To start a new Python project, create a new project and copy or download this [template](https://github.com/NDCLab/templates/blob/main/project_bases/python_ci/.github/workflows/python_ci.yaml). This will include a [YAML](https://en.wikipedia.org/wiki/YAML) configuration file, a shell script, and a [pip](https://pip.pypa.io/en/stable/) dependency text file. The YAML configuration file will have the options to run the GitHub Action. The shell script `run_tests.sh` will be a [Bash](https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29) script that is called from the GitHub Action [virtual machine](https://en.wikipedia.org/wiki/Virtual_machine) to run the Python checks. The `requirements-dev.txt` file is a [requirements](https://pip.pypa.io/en/stable/reference/pip_install/#example-requirements-file) file to install the Python dependencies needed using `pip` to run the checks. ## Using GitHub Actions Once you upload changes you can access the GitHub Actions by going to the \"Actions\" tab: ![actions](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/gh_actions/actions.png) You will have workflows on the left, these are custom named CI workflows. By default all Python projects will have `Python-CI` which will have the lint check, code style check, and python tests check. ![workflows](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/gh_actions/workflows.png) On the right, you will see \"All workflows\" which is a list of all results from running the actions. ![all workflows](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/gh_actions/all_workflows.png) To see a more detailed look click on the name in bold: ![check](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/gh_actions/press_build.png) Here you will see the information for the job that was run and the to see the output log for the job click on the floating build button: ![build log output](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/gh_actions/log_output.png) > Note: Builds will run for the specific branch you have pushed, as long as the YAML configuration > files exists so make sure when creating a feature branch that the `.github/workflow/` directory > exists. ## Build Badge A build badge is a simple way to tell the users of your code that the code is functioning correctly. This allows the user to decide quickly whether is worth it to try to go through the install or not. Without the badge, a user would have to risk downloading and installing the software only to find out it does not work. It also helps contributers and maintainers have an easy visual check of whether a branch is working or not. To add the `build` badge to the README or any other document go to the [shields.io](https://shields.io/category/build) site and search for \"GitHub Workflow Status\". The two options to look for are \"GitHub Workflow Status\" and \"GitHub Workflow Status (branch):\", select one by clicking on the name or build button. It will prompt you to write the organization/user and repository and then click \"Copy Badge URL\". ## Why Actions are Important Code correctness and good style formatting. Testing code on every push to the repository, for example when submitting a bug fix, decreases the chances of re-introducing old bugs or introducing new ones Keeping code looking clean and well formatted using the lab style guide makes it so that anyone in the lab can look at someone else's code and be able to better understand it. This makes it easier for collaboration to occur across teams, and people that would like to contribute to projects in the lab. ## Additional Resources - [GitHub Guides](https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions) - [Building and testing on Python](https://docs.github.com/en/free-pro-team@latest/actions/guides/building-and-testing-python) - [YAML Options](https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions) ",
    "url": "/docs/technical-docs/python-ci-workflow.html",
    "relUrl": "/docs/technical-docs/python-ci-workflow.html"
  },"33": {
    "doc": "Reporting Concerns",
    "title": "Reporting Concerns",
    "content": "### Contents 1. [Overview](#overview) 2. [Types of Concerns](#types-of-concerns) 3. [How to Report Concerns](#how-to-report-concerns) 4. [Protocol for Dealing with Alleged Violations of Scientific Trust](#protocol-for-dealing-with-alleged-violations-of-scientific-trust) 5. [Title IX](#title-ix) 6. [Other Resources](#other-resources) ## Overview The NDCLab is founded upon [standards of openness, respect, and accountability](https://ndclab.github.io/wiki/docs/around-the-lab/community-standards.html). When lab members have concerns, these should be addressed in the shortest possible timeframe in order to ensure that the lab remains an inclusive, positive place to achieve [our shared goals](https://ndclab.github.io/wiki/docs/welcome/lab-culture.html). ## Types of Concerns In a collaborative environment, many different types of concerns may arise, such as: * Concerns over general professionalism * Concerns over potential data security risks (committing, or through negligence allowing, unauthorized breach of participant confidentiality) * Concerns over interpersonal violations of trust (lying, intentionally witholding infromation, etc.) * Concerns over scientific violations of trust (plagarism, falsifying data, etc.) * Concerns over discriminatory, offensive, or harassing behavior * Concerns over potential ethics violations * Concerns over non-compliance with rules and regulations ## How to Report Concerns First, please consider if you can discuss your concern directly with the individual involved. Often, concerns arise from simple misunderstandings and an open discussion can resolve them most efficiently, providing both parties with an opportunity to understand the perspective of the other. If you have a concern to report that cannot be discussed directly with the individual, or such a discussion has failed to lead to satisfactory resolution, you must decide if you are comfortable reporting your concern directly, either to the lab director or the lab manager, or if you are only comfortable making the report anonymously. Wherever possible, direct reporting of concerns is preferred as this aligns with the lab's culture of openness, honesty, and accountability. To make a direct report, simply reach out to either the lab director or the lab manager to discuss your concern. They both commit to hearing all concerns with an open mind and withholding judgment until the concern has been investigated. If you are only comfortable making an anonymous report, use [this anonymous box](http://freesuggestionbox.com/pub/pwsobxg). Only the lab director and lab manager can see the contents of this box, which includes your comments, along with the date and time you sent them. They cannot see any information about you as the sender. ## Protocol for Dealing with Alleged Violations of Scientific Trust Alleged violations of scientific trust are a special category of concern; they are dealt with as follows: 1. Alleged violations of the lab's trust should be discussed privately with the accused first to resolve potential misunderstanding on the assumption that the violation of trust was a mistake and not the result of bad intentions. 2. If the direct discussion above does not lead to satisfactory resolution, the lab director should be informed privately. 3. Once informed, the lab director will investigate the alleged violation of trust as privately as reasonably possible. It must be noted, however, that anyone accused of violating the lab's trust has the right to be aware of the accusation and respond to it accordingly. 4. The lab director must make a determination of whether a violation of trust occurred and also whether it was likely intentional, unintentional, intent cannot be determined, or a statement of intent is not being made (often, for our purposes, intent does not matter). 5. This determination will be recorded in a public-facing ledger and announced to the individuals affected (this may require a small announcement to a specific project, a lab-wide announcement, or a wider public announcement). 6. As part of this public facing ledger, any bans will be listed and/or whether the individual is listed as an “untrusted source”. ## Title IX The NDCLab does not tolerate any form of discrimination or harassment by its members. Furthermore, all lab members should be aware that the lab director and all members of lab staff are legally required to and will report any violation of federal [Title IX](https://en.wikipedia.org/wiki/Title_IX) of which they become aware. ## Other Resources We believe that most, if not all, concerns can be resolved by means of the above protocols. If, however, your concern is of such a nature that you are not comfortable raising it with the lab director or lab manager, FIU does provide a hotline where you can make a confidential report: [https://compliance.fiu.edu/hotline/](https://compliance.fiu.edu/hotline/) ",
    "url": "/docs/around-the-lab/report-concerns.html",
    "relUrl": "/docs/around-the-lab/report-concerns.html"
  },"34": {
    "doc": "Roles & Expectations",
    "title": "Roles & Expectations",
    "content": "## Overview The NDCLab community relies upon each member to be open, accountable, and respectful. This means that there are certain expectations incumbent upon each member. In addition, the roles of lab director, lab manager, and lab technician have special, ancillary responsibilities to fulfill so that all lab members may count on them to serve the best interests of the lab. ## What is Expected from All Lab Members You are now a lifelong member of the NDCLab and a future lab alumnus/a. The success of each member of the lab (or team of lab members) means the success of the NDCLab as a whole. When one person or group publishes a great paper, it shows anyone else in the lab can do the same. If one lab member is accepted into a top-tier PhD program or lands a dream job in industry, it shows that others can come through the NDCLab and achieve their own lofty goals. With each individual success of the lab, the lab gains prestige and this increases the value of your membership because letters of recommendation from the lab director will carry more weight. Therefore, membership in the NDCLab is a team effort and all members are expected to fulfill [our community standards](https://ndclab.github.io/wiki/docs/around-the-lab/community-standards.html) by: * Learning from and with each other. * Mentoring and helping one another. * Supporting and lifting each other up. * Doing our part to create a culture of open communication. * Acting professionally and with integrity. * Acting with care and being attentive to detail. * Being respectful. * Being open about our strengths and weaknesses. * Owning our own mistakes. * Pre-empting potential conflicts through constructive dialogue. * Being accountable for the tasks we say we will accomplish, and completing them when we say we will. * Being honest and forthcoming about roadblocks or challenges that may cause delays. * Communicating quickly, openly, and honestly. * Being unafraid to make suggestions and question things we don't understand. **Dress Code** Members of the NDCLab interact not only with one another, but also with members of the greater FIU community and with the adolescents and families supported by the Center for Children and Families. Business casual attire is expected when representing the lab, whether in-person or via remote teleconferencing. In practice, this means dressing as you would to a job interview, avoiding the exposure of too much bare skin, offensive logos, etc. If you are uncertain as to what constitutes appropriate attire, reach out to the lab manager for additional guidance. ## What to Expect from the Lab Director **Lab Level** The lab director commits to: * Ensuring that the NDCLab remains a positive, inclusive and supportive environment where we can achieve the [dual objectives of the lab](https://ndclab.github.io/wiki/docs/welcome/lab-culture.html). * Setting the larger research agenda and priorities for the lab. * Ensuring the lab has the people and resources it needs to run smoothly and achieve our goals. * Fostering collaboration and communication, and celebrating differences. * Communicating the larger context of any given task. * Removing roadblocks to execute tasks in line with agreed priorities. * Operating honestly and transparently. **Individual Level** For members who remain committed to the lab, you can expect the lab director to remain committed to *you* for life. He will strive to: * Match your strengths and skills to impactful roles and experiences. * Recognize your contributions (did someone say “authorship?”). * Provide mentorship/connections to help you navigate academia or a non-academic career. * Provide direct, one-on-one, theoretical, technical, and practical training where appropriate. (*But also*: point you in the right direction to facilitate your “learning how to learn.”) * Motivate you when you lose sight of the bigger picture. (*But also*: have frank conversations about the diversity of possible career paths, within and outside academia.) ## What to Expect from the Lab Manager and Lab Tech As support staff for the lab, the lab manager and lab technician are expected, in addition to fulfilling the expectations established for all lab members, to ensure that the lab is well-organized, operating smoothly, and a positive place to do science. ## What is Expected from Research Assistants Research assistants play a pivotal role in the lab's research. They assist with many aspects of data collection and analysis, such as helping recruit study participants, set-up and run experiments, and code data. All research assistants are expected to be actively interested in the theory behind the lab's research and therefore to treat their time with the lab as an opportunity to learn about the research process. Senior RAs serve as knowledgeable members of the lab community and often take on the role of project lead for specific research initiatives; this role entails an expectation of leadership and a deeper commitment from the lab director in terms of long-term career support. ## What is Expected from Research Technicians Research technicians play a vital role in the lab's research by developing the tools that enable the collection and analysis of high-quality data. All research technicians are expected to be actively interested in the methods used by the lab and to contribute their technical knowledge to the accomplishment of the lab's objectives. ## What is Expected from Other Associates Other associates, such as graduate student affiliates or high school interns, are expected to contribute to the lab in either an assistantship or technician capacity. ",
    "url": "/docs/around-the-lab/roles-expectations.html",
    "relUrl": "/docs/around-the-lab/roles-expectations.html"
  },"35": {
    "doc": "rwe-alpha",
    "title": "rwe-alpha",
    "content": "# real-world-errors-alpha This study creates a dataset that can be used to understand how individual differences in reading and speech relate to specific cognitive skills, personality, and mental health. ### Background Prior work suggests that individuals with the temperament type known as “behavioral inhibition” are more likely to develop social anxiety if they also demonstrate particular profiles of cognitive control abilities ([White et al., 2011](http://dx.doi.org/10.1007/s10802-011-9490-x); [Buzzell et al., 2020](http://dx.doi.org/10.1016/B978-0-12-814411-4.00024-X)). However, it remains unclear to what degree these associations depend on social observation and whether these associations depend on the temperament of the individual, other personality or social factors, or are present for the majority of individuals with social anxiety. There is some work suggesting that links between forms of cognitive control (e.g., error monitoring) and social anxiety are influenced by social observation ([Buzzell et al., 2017](https://doi.org/10.1016/j.jaac.2017.10.007)). Few studies have investigated the effect of social observation on relations between social anxiety and more ecologically valid measures of cognitive control (e.g., cognitive control during speech and reading). The current study aims not only to close these gaps in the literature, but also to provide a broader investigation of how particular cognitive abilities, as well as personality and social factors, relate to mental health outcomes in real-world scenarios. Towards these ends, participants perform a reading aloud task twice, once while alone and once while being observed by the experimenter; they also perform a set of traditional cognitive control tasks (flanker task, dimensional change card sort task, n-back task–task development was based on the modification of existing paradigms). Participants complete a general battery of questionnaires to assess their thoughts and feelings before and after completing the tasks. ### Major Goals In the broader sense, this study aims to: - Understand how individual differences in reading and speech behaviors relate to particular cognitive abilities, personality, and social factors. - Understand how individual differences in reading and speech behaviors relate to mental health outcomes, such as social anxiety. More specifically, this study aims to: - Determine whether individuals with social anxiety change their behavior (accuracy and response time) after making errors on simple computer tasks and ecologically-valid reading activities in similar ways, and if such changes depend on whether the individual is being observed or not. - Determine whether the association between specific executive functions (tasks switching, inhibitory control, and working memory) and social anxiety depend on social observation and/or the temperament of the individual. ",
    "url": "/docs/current-projects/rwe-alpha.html",
    "relUrl": "/docs/current-projects/rwe-alpha.html"
  },"36": {
    "doc": "Shell",
    "title": "Shell",
    "content": "### Contents 1. [Overview](#overview) 2. [Opening a Shell](#opening-a-shell) 3. [Shell Tips](#shell-tips) 1. [Key Terms](#key-terms) 2. [Important Commands](#important-commands) 3. [Additional Resources](#additional-resources) ## Overview It's very useful to know how to use a [command-line interface (CLI)](https://en.wikipedia.org/wiki/Command-line_interface) inside a [shell](https://en.wikipedia.org/wiki/Shell_(computing)). At the NDCLab, you will need this knowledge to work with [GitHub](https://ndclab.github.io/wiki/docs/technical-docs/git_and_github.html) and the [FIU HPC](https://ndclab.github.io/wiki/docs/technical-docs/hpc-doc.html), among other applications. ## Opening a Shell **Mac** On OS releases starting from Catalina, the default shell provided is [Zsh](https://en.wikipedia.org/wiki/Z_shell) which is very similar to [Bash](https://en.wikipedia.org/wiki/Bash_(Unix_shell)) because both are [POSIX](https://en.wikipedia.org/wiki/POSIX) compliant. This is good because shell scripts written in either scripting language will be usable on either macOS or Windows without tweaks. To access Zsh, open up a normal terminal simply by clicking on the Terminal application on your Mac. **Windows** Install Git first. Check out [these instructions](https://ndclab.github.io/wiki/docs/technical-docs/git_and_github.html). Navigate to any location on your machine (although one suggests selecting a location where you will do all your NDCLab work), right-click, and select \"Git Bash Here\" from the menu. This opens a Bash shell where you can input shell and git commands. ![git-bash](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/git-bash.png) (There is a different option that uses the [Command Prompt](https://en.wikipedia.org/wiki/Cmd.exe). Using the Command Prompt is not recommended since it uses a different tool set which is not covered in this guide.) **Linux** There are many ways to open a shell on Linux. One example: right-click your desktop and select \"Open Terminal\" from the menu. ## Shell Tips ### Key Terms Here is some of the key terminology used in working with a shell: - **command**: an instruction from you (the user) to your computer. - **directory**: another name for a folder. When you navigate around your files using the shell, you're always \"sitting\" in a directory (called your \"current directory\"). - **option**: an option that the program will allow you to change using special formatting, generally denoted with a \"--\" in front of the option name. For example \"--option value\". - **flag**: an option that can be on or off, generally denoted with a \"-\" in front of the name. For example \"-t\". ### Important Commands #### ls `ls` will list the files and directories that live within the directory that you are currently \"in.\" This is useful to see what is in your current directory, but it can also show you the contents of any directory as long as you provide a valid path to that directory and you have permission to view that directory. Example: ```sh # ls without options (outputs results on one line) ls #> Downloads Desktop stories.txt ... # ls with the flag option -l (outputs one result per line) ls -l #> drwxr-xr-x - username 31 May 10:35 Desktop #> drwxr-xr-x - username 9 Oct 14:52 Downloads #> drwxr-xr-x - username 25 Aug 17:00 stories.txt ``` #### cd `cd` (change directory) is a shell command that allows you to move from one directory to another. This is useful to move around in the shell and, like `ls`, it will accept any valid path to any directory. There are two kinds of paths: **Relative paths**, which are path names relative to your current directory. This path can start with either `.` for the \"current directory or `..` for \"the directory above this directory\". **Absolute paths** are paths that start from the root of the file-system (`/` in macOS or `c:/` in Windows). Example: ```sh # Example with a relative path # Current directory: /home/user/proj_dir/ cd ./sub_folder/ # Current directory: /home/user/proj_dir/sub_folder/ # Example with an absolute path # Current directory: /c/Users/username/Desktop/ cd /c/Users/ # Current directory: /c/Users # Shortcut to go up one level # Current directory: /home/user/proj_dir/sub_folder/ cd .. # Current directory: /home/user/proj_dir/ # Shortcut to return home # Current directory: /home/user/proj_dir/sub_folder/ cd ~ # Current directory: /home/ ``` #### mkdir `mkdir` (make directory) is a shell command that allows you to create a new directory. This is useful to create a folder on your local where you can store files. You can name your directory anything that relates to the content within the directory. Example: ```sh # This example will create a directory named github on your local machine: mkdir github # Make sure you are in the desired location when you create a new directory. # To check where you are currently at (seeing the contents of your current directory), use: ls # To navigate to your root (on Mac), use: cd ~ ``` ## Additional Resources Here are several Linux cheat sheets with useful commands. Not all of these commands will work on Windows and macOS, but most of the core commands are the same with Linux and will therefore work. [Linux Commands](https://www.guru99.com/linux-commands-cheat-sheet.html) [Linux Tutorials](https://ryanstutorials.net/linuxtutorial/cheatsheet.php) ",
    "url": "/docs/technical-docs/shell.html",
    "relUrl": "/docs/technical-docs/shell.html"
  },"37": {
    "doc": "Slack Setup",
    "title": "Slack Setup",
    "content": "# Joining Slack The NDCLab Slack workspace is the primary communication platform in the lab. Here is what you need to know to get set up and use the platform effectively. This wiki page covers how to: 1. Join the workspace. 2. Decide if you'll use the app or the browser. 3. Customize your profile. 4. Learn the etiquette. 5. Introduce yourself to the team! ## Invitation As an incoming lab member, you will receive an invitation to join the Slack workspace. You will need to manage your own login and password. ## Browser v. App You can either connect to the workspace in a browser, like Chrome, or download the application (to your desktop, laptop, or mobile device). For lab purposes, there is no preference: just pick the option you like best. ## Your User Profile You can edit your profile by following the instructions [here](https://slack.com/help/articles/204092246-Edit-your-profile). Please include all of the following: **Profile Photo:** Please include either a picture or an avatar of your fabulous face! **Full Name:** This is your first and last name(s). **Display Name:** Please use the name you prefer people call you, plus your last name. **What I Do:** Share your role (Junior Research Assistant, Senior Research Tech, etc.) **Phone Number:** Include your number. We don't make a lot of phone calls, but just in case we ever need to get in touch in a hurry. Know that only active lab members have access to this information. **Time Zone:** Not everyone is in Miami, so input your time zone to let the team know where you are. ## Channels You have been automatically added to the following Slack channels: **#general**: this is our main \"meeting place\" for the lab at large **#from-george**: this is where George communicates important messages to the whole lab **#tech**: this is where tech solutions happen, post your problems and help your labmates with theirs In addition, if you will be assigned to an active project, the lab manager will add you to the appropriate project channel. The NDCLab is an open lab, so you have access to all channels that you wish to join. ## Etiquette * **DON'T** use e-mail. All lab communication happens on Slack; we don't use e-mail for lab-internal communications. * **DO** feel free to [join other channels](https://slack.com/help/articles/205239967-Join-a-channel) if you want to see what is going on elsewhere in the lab. This is an open lab, after all! But be careful that you don't create too much \"noise\" for yourself; you don't want to miss any important communications about your project or that every lab member needs to know. We suggest that you [mute channels](https://slack.com/help/articles/204411433-Mute-channels-and-direct-messages) that you aren't involved in. * **DO** check that you get notifications for @mentions. You have several options on Slack, so [do your homework](https://slack.com/help/articles/360025446073-Guide-to-Slack-notifications) and set it up in a way that works for you. * **DON'T** worry about sending messages at weird hours. There is no \"right\" or \"wrong\" time to send a message on Slack. Our team spans the globe. So send whenever you want to. But never feel obligated to respond to Slack message during evening/weekend hours just because someone else was burning the midnight oil. * **DON'T** jump on your phone to respond to a Slack message at midnight, but **DO** check Slack regularly and respond within one weekday to any incoming message. * **DO** be intentional about which channel you choose to post a given message within and/or whether to use a DM. For example, project-related conversations (even if only between two people!) should always be posted within the relevant project channel. * **DO** feel free to update your [Slack status](https://slack.com/help/articles/201864558-Set-your-Slack-status-and-availability) to let your labmates know when you're available. For instance, you can update your status to \"out sick\" if you are feeling unwell and won't be responsive to messages. This lets your team know when you will be unavailable to respond. ## Say Hi! Now that you're all set up, say \"Hi!\" to the team on #general! We can't wait to meet you! ## Learn the Lingo We love emojis and reacjis here at the lab. But some of them are really special. Here is a helpful guide! | emoji | shortcode | origin | :-- | :-- | :-- | ![ham-comp](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/slack-emojis/ham-comp.png) | ham-comp | The lab's first in-person training included an overview of the HPC. Farukh, the lab tech, used this image of a hamster at a computer to denote interactive activities during the training. | ![ham-cage](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/slack-emojis/ham-cage.jpg) | ham-cage | As part of that same training, the caged hamster was used to denote restricted access on the HPC. | ![ham-wild](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/slack-emojis/ham-wild.png) | ham-wild | Likewise, the wild hamster was used to denote full access on the HPC. | ![amblyrhynchus](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/slack-emojis/amblyrhynchus.jpg) | amblyrhynchus | The Real World Errors project involves reading aloud passage from Darwin's _Voyage of the Beagle_. One of the passages talks about the amblyrhynchus, which is a marine iguana from the Galapagos. Participants quite naturally have a hard time with that one... | ",
    "url": "/docs/Onboarding/slack-setup.html",
    "relUrl": "/docs/Onboarding/slack-setup.html"
  },"38": {
    "doc": "social-context-alpha",
    "title": "social-context-alpha",
    "content": "# social-context-alpha This study aims to answer two key questions: 1. Is there an association between social anxiety and specific executive functions? 2. If so, does this relation depend on social context and/or an individual’s temperament? ### Background Broadly, this study aims to clarify relations between particular cognitive abilities, personality and social factors, and mental health outcomes such as social anxiety. Prior work suggests that individuals with a temperament known as “behavioral inhibition” are more likely to develop social anxiety if they also exhibit particular profiles of cognitive control ability, including impaired task switching or superior inhibitory control (White et al., 2011; Buzzell et al., 2020). However, it remains unclear how much these associations depend on the context in which task switching and inhibitory control are assessed (i.e. within social settings as opposed to while alone). Additionally, it remains unclear if these associations depend on the temperament of the individual, other personality or social factors, or are present for the majority of individuals with social anxiety. There is at least some work to suggest that the link between some forms of cognitive control (e.g. error monitoring) and social anxiety are influenced by whether cognitive control is assessed within a social context or not (Buzzell et al., 2017). However, there is little work investigating the effect of social context on relations between social anxiety, task switching, and inhibitory control. Moreover, task switching and inhibitory control are related to the ability to maintain and manipulate information within short-term memory, a process referred to as “working memory”, but the link between working memory, social anxiety and temperament is unknown. The current study aims to not only close these gaps in the literature, but also provide a more broad investigation of how particular cognitive abilities, and personality or social factors, relate to mental health outcomes. Towards these ends, participants will perform a task battery that is designed to assess task switching, inhibitory control, and working memory, when responding to either social stimuli (faces) or neutral stimuli (scrambled faces). Additionally, the task battery will be performed twice, once while alone and once while being observed by the experimenter. Task development was based on the modification of existing paradigms and using a standardized set of face stimuli (Lundqvist et. al., 1998). Participants will also complete a more general battery of questionnaires and executive function tasks (flanker task, dimensional change card sort task, n-back task). ### Major Goals * To determine whether there is an association between social anxiety and specific executive functions (task switching, inhibitory control, and working memory). * To determine whether relations between social anxiety and executive function depend on social context or an individual’s temperament. * To explore more generally how individual differences in cognitive abilities, personality, or social factors relate to mental health outcomes. ",
    "url": "/docs/current-projects/social-context-alpha.html",
    "relUrl": "/docs/current-projects/social-context-alpha.html"
  },"39": {
    "doc": "HPC Status",
    "title": "HPC Status",
    "content": "| **CPU Idle Time** | HPC login node at normal usage. | ",
    "url": "/docs/hpc/status.html",
    "relUrl": "/docs/hpc/status.html"
  },"40": {
    "doc": "Taking Time Away",
    "title": "Taking Time Away",
    "content": "## Taking Time Away Many members of the NDCLab give their time to the lab voluntarily; others are employees or graduate students. All lab members have a standard weekly time commitment that varies depending upon their role. There is never an expectation, even implicit, that lab members should be working 24/7. It's important to work hard. But it's also important to take time away from work to focus on your health, your family and friends, and your personal endeavors. Balancing these things makes it possible to be productive and enjoy your work for the long-term. How precisely you balance them is a personal choice. Therefore, lab members are encouraged to regularly take time off for themselves, provided that: * their absence will not negatively impact the people and projects that depend on them. * their plans are communicated to the team with adequate, advance notice. In addition, part-time and full-time staff members must comply with FIU policies regarding time off. ",
    "url": "/docs/around-the-lab/taking-time.html",
    "relUrl": "/docs/around-the-lab/taking-time.html"
  },"41": {
    "doc": "Technical Documentation",
    "title": "Technical Documentation",
    "content": "# Technical Documentation ",
    "url": "/docs/technical-docs",
    "relUrl": "/docs/technical-docs"
  },"42": {
    "doc": "Welcome",
    "title": "Welcome",
    "content": "# Welcome ",
    "url": "/docs/welcome",
    "relUrl": "/docs/welcome"
  },"43": {
    "doc": "Who's Who",
    "title": "Who's Who",
    "content": "### Lab Director | ![buzzell](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/buzzell.jpg) | Dr. George Buzzell | --- | --- | pronouns | he/him/his | location | Miami, FL | GitHub | georgebuzzell | Email | gbuzzell@fiu.edu | research interests | George is interested in cognitive control, particularly as it relates to social anxiety. His work focuses on EEG methods. | hobbies | eating avocados | ### Lab Manager | ![alexander](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/alexander.jpg) | Jess Alexander | --- | --- | pronouns | she/her/hers | location | Austin, TX | GitHub | jessb0t | Email | jalexand@fiu.edu | research interests | Jess is interested in the neural, cognitive, and behavioral underpinnings of emotion and language. | hobbies | I'm an avid runner, I love to travel, and I play the piano. | ### Lab Technician | ![saidmuratov](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/saidmuratov.jpg) | Farukh Saidmuratov | --- | --- | pronouns | he/him/his | location | Troy, NY | GitHub | F-said | Email | | research interests | Farukh is interested in computational models of cognition. | hobbies | baking, eating what I bake, [amateur data science](https://github.com/F-said/march-madness-predict), and gardening | ### Graduate Students | ![hosseini](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/hosseini.jpg) | Kianoosh Hosseini | --- | --- | pronouns | he/him/his | location | Miami, FL | GitHub | Kianooshhosseini | Email | khoss005@fiu.edu | research interests | Kianoosh is interested in studying the underlying neural and cognitive processes involved in cognitive control and their development, using neuroimaging techniques (fMRI, EEG) with various computational and behavioral methods. | hobbies | Playing strategic video games and bike-riding | ![stibolt](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/stibolt.jpg) | Olivia Stibolt | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | ostibolt | Email | ostib001@fiu.edu | research interests | Olivia is interested in using EEG to investigate the neural mechanisms of cognitive control and the influence of anxiety on post-error behavior. | hobbies | Painting nails, DnD, and riding horses | ![winters](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/winters.jpg) | Alycia Winters | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | AlyciaWinters | Email | awint016@fiu.edu | research interests | Alycia is interested in the role of stress and trauma in shaping trajectories of cognitive control development and social behavior. | hobbies | Drawing, DnD, video games, and learning about history | ### Graduate Student Affiliates ### Senior Research Assistants | ![machado](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/machado.jpg) | Emily Machado | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | emach039 | Email | emach039@fiu.edu | research interests | Emily is interested in understanding the effect mental health has on cognitive performance. | hobbies | sleeping, drawing, skincare, fashion, video games | ![malykke](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/malykke.jpg) | Sarah Malykke | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | SarahMalykke | Email | smaly002@fiu.edu | research interests | Sarah is interested in research on the phenomenon of choking under pressure and aims to understand what brain systems support excellent performance. | hobbies | taekwondo, traveling, and of course napping | ![polyanskaya](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/polyanskaya.jpg) | Arina Polyanskaya | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | apoly1 | Email | apoly003@fiu.edu | research interests | Investigating the possible link between social anxiety and cognitive control performance. | hobbies | Traveling, hiking, camping, dancing, cooking/eating food, and anything else I would be introduced to. |![lopez-nunez](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/lopez-nunez.jpg) | Ana Lopez-Nunez | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | anaNDClab | research interests | Ana is interested in the relationship between the neural, behavioral, and cognitive aspects of mental illness and substance use disorder.| hobbies | painting, drawing, and watching crime documentaries. | ### Senior Research Technicians | ![niu](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/niu.jpg) | Yanbin Niu | --- | --- | pronouns | she/her/hers | location | Xi'an, CHN | GitHub | yanbin-niu | Email | yn2352@tc.columbia.edu | research interests | Yanbin is interested in social and emotional development, as well as the underlying neurocognitive mechanisms. | hobbies | LEGO and coffee | ### Junior Research Assistants | ![bailey](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/bailey.jpg) | Nicole Bailey | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | nbail021 | Email | nbail021@fiu.edu | research interests | Nicole is interested in examining the relationship between cognitive function and social behavior using EEG methods. | hobbies |Working out, traveling, playing with my dog. | ![charest](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/charest.jpg) | Sophia Charest | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | sophiacharest | Email | schar107@fiu.edu | research interests | Understanding the behaviors and motivations of others, specifically the relationship between the physical brain and behavior. | hobbies | Clay sculpting, listening to music, watching basketball, nails/fashion | ![chow](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/chow.jpg) | Ada Chow-Franjul | --- | --- | pronouns | she/her/hers | location | Cutler Bay, FL | GitHub | achow027 | Email | achow027@fiu.edu | research interests | Ada is interested in the cognitive and psychological relationship with social anxiety in adolescence. | hobbies | roller skating at the park, traveling, working out and watching the sunrise/sunset | ![dickinson](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/dickinson.jpg) | Renata Dickinson | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | renatadickinson | Email | rdick014@fiu.edu | research interests | Renata's research interests are in developmental and behavioral psychology. | hobbies | Snorkeling, learning new recipes, watching movies, dancing, fashion | ![duncombe](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/duncombe.jpeg) | Anfernee Duncombe | --- | --- | pronouns | she/her/hers | location | Freeport, The Bahamas| GitHub | adunc018 | research interests | Anfernee is interested in the relationship between neurodevelopmental disorders and executive functioning | hobbies | Writing, rewatching the same 5 shows, baking | ![fischer](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/fischer.jpg) | Aitana Fischer | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | AitanaFischer | Email | afisc020@fiu.edu | research interests | Aitana is interested in the relationship between cognition and behavior, and its interrelation with mental illness. | hobbies | reading, singing, playing guitar | ![gallardo](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/gallardo.JPG) | Laura Gallardo | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | laurag049 | Email | lgall049@fiu.edu| research interests | Laura is interested in the effects of social anxiety on cognition. | hobbies | Trying new foods, boxing, watching movies | ![garciamorazzani](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/garciamorazzani.jpg) | Ana Garcia Morazzani | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | Ana Garcia Morazzani | Email | agarc884@fiu.edu | research interests | Ana is interested in psychopharmacology, sleep, and metacognition.| hobbies | playing the guitar, dj mixing, drawing, being outdoors. | ![guerra](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/guerra.jpg) | Karen Guerra | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | 1karenguerra | Email | kguer039@fiu.edu | research interests | Karen is interested in how our lifestyles affect our genetic expression (epigenetics) and and how they influence our neural circuits | hobbies | (attempting to) lift heavy things in the gym, traveling, reading, tiktok aficionado, baking and learning new languages. |![khouly](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/khouly.jpg)| Isabel Khouly | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | isabelkhouly | Email | ikhou001@fiu.edu | research interests | Isabel is interested in the effects of exercise on human cognition and behavior | hobbies | running, journaling, and cleaning | ![padua-jimenez](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/paduajimenez.jpg) | William Padua Jimenez | --- | --- | pronouns | he/him/his | location | Miami, FL | GitHub | Wpadua | Email | wpadu001@fiu.edu | research interests | William is intrested in Performance control within athletes, and stem cell research | hobbies | working out, investing, learning, playing video games | ![roch-hernandez](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/roch-hernandez.jpg) | Sebastian Roch-Hernandez | --- | --- | pronouns | he/him/his | location | Miami, FL | GitHub | SebaRoch-H1 | Email | sroch015@fiu.edu | research interests | Sebastian is interested in the physiological effects music has on human cognition and behavior. | hobbies | Playing guitar, reading, trying to learn random things. | ![rodriguez](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/rodriguez.jpg) | Brittney Rodriguez | --- | --- | pronouns | she/her/hers | location | Huntsville, AL | GitHub | brod0512 | Email | britrodr@fiu.edu | research interests | Brittney is interested in the effects of substances in child and adolescent cognition. | hobbies | drinking coffee, traveling and working out | ![rodriguez-delgado](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/rodriguezdelgado.jpg) | Carlos Rodriguez Delgado | --- | --- | pronouns | he/him| location | Miami, FL | GitHub | carlosndc | Email | crodr644@fiu.edu | research interests | Carlos is interested in the use of psilocybin in clinical contexts to treat depression and anxiety as well as the dopamine pathways and how they contribute to discipline development. | hobbies | weightlifting, cooking, fishing, and hiking. | ![mrodriguez](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/mrodriguez.jpg) | Maria Rodriguez | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | mrodr1326 | Email | mrodr1326@fiu.edu | research interests | Maria is interested in examining the cognitive functions of mental illness. | hobbies | working out, reading, and binging TV shows | ![weber](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/weber.jpg) | Lauren Weber | --- | --- | pronouns | she/her/hers | location | Miami, FL | GitHub | laurenweberr | Email | lwebe013@fiu.edu | research interests | Lauren is interested in behavioral and developmental psychology, specifically the emergence of anxiety within adolescence. | hobbies | water sports, working out, traveling, tennis, and watching documentaries | ### Junior Research Technicians | ![lopez](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/whos-who/lopez.jpg) | Brandon Lopez | --- | --- | pronouns | he/him/his | location | Homestead, FL | GitHub | blope118 | Email | blope118@fiu.edu | research interests | Brandon is interested in developing computational tools to assist researchers. | hobbies | playing video games, playing basketball, and drawing | ",
    "url": "/docs/welcome/whos-who.html",
    "relUrl": "/docs/welcome/whos-who.html"
  },"44": {
    "doc": "ZenHub",
    "title": "ZenHub",
    "content": "### Contents 1. [Overview](#overview) 2. [Installing](#installing) 3. [Tour of the Pipelines](#tour-of-the-pipelines) 4. [Defining Epics](#defining-epics) 5. [Planning Sprints](#planning-sprints) 6. [Monitoring Progress](#monitoring-progress) 6. [Tips and Tricks](#tips-and-tricks) ## Overview ZenHub is a plug-in for your browser that connects to GitHub. It offers [Kanban](https://en.wikipedia.org/wiki/Kanban_board)-style boards, called \"workspaces,\" which the NDCLab uses to visually manage projects. When an issue is created inside GitHub, it automatically appears on the *New* pipeline on an associated ZenHub workspace. In general, each repository is connected to one workspace, but it is possible to connect multiple repositories in special circumstances where this would be beneficial to project management. ## Installing 1. Before you install ZenHub, [get yourself with git](https://ndclab.github.io/wiki/docs/Onboarding/get-with-git.html). It is important that you are already a member of the NDCLab organization on GitHub before you install the ZenHub extension. 2. Download the ZenHub extension, which is currently available for Chrome and Firefox. You can do this directly from the browser extension store or using the [link available from ZenHub](https://help.zenhub.com/support/solutions/articles/43000507578-installing-the-zenhub-extension-for-cloud). 3. During this process, you will need to authorize ZenHub to see your personal and organization repositories. 4. After installing, you'll probably find yourself within the ZenHub app. Some lab members prefer to operate in this interface, but you will want to hop back over to GitHub to get your bearings first. On the same browser where you installed ZenHub, re-navigate to the NDCLab GitHub page. If you click on any repository, you should now see the \"ZenHub\" tab within that repository. ![gh_zenhub-tab](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/gh_zenhub-tab.png) ## Tour of the Pipelines When a new workspace is created, it uses the NDCLab default pipelines. These are [customized](https://ndclab.github.io/wiki/docs/etiquette/github-templates.html) for each NDCLab workspace into the following pipelines. ![zh_pipelines](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/zh_pipelines.png) | Pipeline Name | Pipeline Descriptor | Pipeline Purpose | :-- | :-- | :-- | New Issues | Issues to be reviewed and estimated before being added to the Project Backlog. | All new issues created in the connected repo(s) are automatically displayed in this pipeline. Issues should immediately be moved to the appropriate *Backlog* pipeline after creation. In general, *New Issues* should be empty. | Project Backlog | List of all work to be completed during the project. Items here can be relatively large and abstract (e.g., release goals) or be specific tasks. | The *Project Backlog* should begin with the tile for the Epic that will come after the current Epic in progress. For example, if the current Epic is \"v1\", then the *Project Backlog* would start with the \"v2\" Epic tile. This is followed by all issues that will be included in the v2 Epic. Next is the \"v3\" Epic tile and its associated issues, and so on. Completing all issues within the *Project Backlog* will accomplish the project goal. | Release Backlog | Upcoming work for current release (all assigned to same Epic). Items should be more refined and broken-down, prioritized top-to-bottom. | The *Release Backlog* should begin with the tile for the current Epic (for instance, \"v1\"), followed by all incomplete issues for the v1 release. Better defined and higher priority issues should be at the top; lower priority issues and issues that are still rather abstract (requiring better definition/granularity before they are assigned to a sprint) should be at the bottom. In general, you will work through the *Release Backlog* from top to bottom. Completing all the issues in the *Release Backlog* means that the release will be ready for publication/distribution to the public. Note that there is never more than one Epic in the Release Backlog at a given point in time. | Sprint Backlog | Issues ready to be worked on in the sprint, prioritized top-to-bottom. | The *Sprint Backlog* is filled during a [sprint meeting](https://ndclab.github.io/wiki/docs/etiquette/github-etiquette.html#sprints). Completing all the items in the *Sprint Backlog* completes the sprint. | In Progress | Issues currently being worked on by the team. | During the sprint, team members pull issues into the *In Progress* pipeline to communicate to one another that they have begun work on the issue. | Review/QA | Issues open to the team for review and testing. Complete, pending feedback. | During the sprint, team members move issues into the *Review/QA* pipeline when they have completed the issue and are awaiting the review and approval of team members before merging into an upstream branch. | Done | Completed issues, pending closure. | Issues that have passed the necessary review/QA are moved to *Done*. During the next sprint meeting, these issues will be formally closed. The *Done* pipeline is basically a temporary holding location to facilitate dialogue during the sprint review. | Closed | (no descriptor) | Issues move automatically into the *Closed* pipeline when they are completed and closed. It is recommended that you collapse the *Closed* pipeline (by clicking the little arrow at the top) to remove unnecessary noise in your workspace. | ## Defining Epics To view existing Epics, click on Roadmap from the left-hand navigation pane. If no epics have been defined, the page will look like this: ![zh_no-epics](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/zh_no-epics.png) However, if one or more Epics has previously been established, you will see a [Gantt-style chart](https://en.wikipedia.org/wiki/Gantt_chart), like this: ![zh_epic-example](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/zh_epic-example.png) In this example, a single Epic has been defined based on an end date. Epics can be named by date in this way, or they can be named with a descriptive name. In both cases, Epics should be given a beginning and an end date. You can define multiple Epics at the same time, either back-to-back or overlapping. To create a new Epic: 1. Click the green `+` button and select \"New Epic.\" 2. Input the name (end date or descriptor). 3. Hover your cursor to the right of the name and click the three vertical dots that appear. Select \"Set start and end date\" from the dropdown. 4. Input the dates of this Epic and click \"Set Timeline.\" All planned project releases should be defined as Epics in ZenHub at project launch in order to provide team members with a visual overview of where the project is going and what progress has already been made in achieving the project goals. The creation of an Epic also creates a GitHub issue for the Epic. This is really just a visual tile for the ZenHub board. Place the Epic associated with the next release at the top of the *Release Backlog* pipeline. Place all other Epics into the *Project Backlog* pipeline. Issues associated with each Epic should nest under the \"Epic\" tile within each pipeline. ## Planning Sprints You can set up sprints within ZenHub so that you can easily assign each issue to the current or an upcoming sprints during your sprint planning meetings. To turn on sprints in ZenHub: 1. Click \"Create on the left-hand navigation pane. 2. Select \"Set up Sprints for your team\" from the dropdown. 3. Leave the default selections on the left (\"Move unfinished Issues to the next Sprint\" should be turned on; \"Automatically build new Sprints from the backlog\" should be turned off). 4. Select the start and end date of the first sprint. This establishes the pattern that ZenHub will carry forward. For instance, if you select one week for the first sprint, ZenHub will create a weekly cycle. If you select two weeks for the first sprint, ZenHub will create a bi-weekly cycle. 5. Click \"Create Sprints.\" 6. Open each issue that has already been assigned to the current sprint in your planning and formally assign it to the current sprint by selecting the sprint. ## Monitoring Progress If you and your team are diligent in establishing time estimates for each issue that you create, you will be able to track your overall progress on the roadmap view. ZenHub calls these time estimates \"story points,\" but it is easier to just think of them as rough working hours. Here is an example where one Epic is 47% complete and the Epic that follows is not yet begun: ![zh_roadmap-example](https://raw.githubusercontent.com/NDCLab/wiki/main/docs/_assets/technical/zh_roadmap-example.png) This is useful for each project. Additionally, there is a lab-wide ZenHub workspace that enables the lab director to get a big-picture view of all lab projects and plan resources accordingly. The more diligent you are in estimating time and keeping your ZenHub board up-to-date, the more you facilitate smooth lab operations and time management. ## Tips and Tricks * Issues created in GitHub automatically appear in ZenHub. Issues created in ZenHub automatically appear in GitHub. They are interconnected. * Follow the lab's [GitHub etiquette](https://ndclab.github.io/wiki/docs/etiquette/github-etiquette.html) by moving issues into the appropriate pipeline as you proceed through the project process. * Open ZenHub daily to check in: how are your team members faring with their tasks? Did you forget to move anything into an *In Progress* or *Review/QA* pipeline? What is next on the priority list? * You can toggle between workspaces by clicking the \"Switch Workspace\" button (two stacked arrows) next to the current workspace name. By starring your preferred workspaces, you can find them more easily. ",
    "url": "/docs/technical-docs/zenhub.html",
    "relUrl": "/docs/technical-docs/zenhub.html"
  },"45": {
    "doc": "Zotero",
    "title": "Zotero",
    "content": "### Contents 1. [Overview](#overview) 2. [Set-Up](#set-up) 3. [Saving Papers](#saving-papers) 4. [Folder Structure](#folder-structure) 5. [Creating and Navigating Tags](#creating-and-navigating-tags) 6. [Quick Tips](#quick-tips) ## Overview Zotero is a reference manager that allows the lab to have a shared collection of papers and makes it easy for users to add properly formatted in-text citations and bibliographies. ## Set-Up ### 1. Create an account Create an account at [this link.](https://www.zotero.org/user/register) ### 2. Get added to the NDC_Lab group library Send a message to the lab manager with either your Zotero username or the email you used to create an account. They will send you an email invite to join the group library. ### 3. Install the application and Chrome extension While you wait to be added to the group library, download both the Zotero application and Chrome extension at [at this link.](https://www.zotero.org/download/) Once the application is installed, it should automatically install a plugin for Word, at which point you will need to restart Word. If it doesn't auto-install, see [this documentation.](https://www.zotero.org/support/word_processor_plugin_manual_installation) ### 4. Sync your account To sync your online account with your local copy of the application, open the local application and navigate to: Zotero > Preferences > Sync. Click \"Link account\" and log in using your Zotero username and password. Zotero should now automatically update the group library as others add papers to it. However, Zotero can be manually synced via the circular green arrow at the top right of the application window. ## Saving Papers Before you save a pdf to Zotero, either via the Chrome extension or by dragging a pdf in from another local folder, check the main NDC_Lab folder to see if the paper already exists in the lab's library. 1. If the paper **does not** exist in the group library, save it to your project’s Triage folder; immediately add your project tag (e.g. 'rwe'). Confirm that Zotero saved a pdf (not a snapshot) and that the metadata (authors' names, title, year published, etc.) is correct. If necessary, manually correct the metadata. 2. If the paper **does** already exist in the group library, **do not** save it again. Instead, drag it from the main NDC_Lab folder to your project folder’s Triage subfolder to \"add\" it to your collection of papers for triage. ## Folder Structure ### NDC_Lab Group Library The group library can be thought of as a collection of songs. Each subcollection (folder) within it acts like a 'playlist' of certain papers. Papers that are removed from subcollections (playlists) are not removed from the group library (all songs) or from other subcollections. Note that a given collection (for example, \"my-project-folder\") does do not actually \"house\" its subcollections (Triage, In-Process, Annotated). Every collection and subcollection is an entirely separate folder and the nesting is only visual. As a result, papers and tags found in a subcollection (e.g. Triage) are not searchable from the main collection (my-project-folder), and vice versa. ### Main project folder No papers are saved in this folder. It only contains a [Standalone Note](https://www.zotero.org/support/notes) that lists the conceptual tags that are relevant for the project. #### Triage This folder is a staging area for papers that may be relevant for the literature review. A lab member confident in paper triage will determine if the paper is relevant to the project and worth annotating. * If a paper passes triage, it gets added to the In-Process folder and removed from Triage. * If a paper fails triage, it gets removed from collection (NOT trashed from library as a whole), and the project tag is removed. #### In-Process This folder is for papers that have been confirmed as relevant for the literature review and now need to be annotated (or are actively in the process of being annotated). Once they have been annotated, they are removed from the In-Process folder and added to the Annotated folder. #### Annotated This folder is for papers that have been read and annotated for a literature review. Relevant conceptual tags are added to the paper when it is added to the Annotated folder. ## Creating and Navigating Tags Papers can be assigned tags and these tags can then be used to filter the library by topic. A project might have tags that refer to theories, concepts, or methods. The tags should be developed by members of the project and listed in a Standalone Note to ensure that all project members are using the same tags. A project's Standalone Note lives in the main project folder. Certain tags might be utilized for multiple projects. In order to make sure tags stay standardized across the lab, there's a Standalone Note in the main NDC_Lab folder; this note contains labwide tags and is called \"NDCLab Conceptual Tags\". Refer to this Note before adding new tags to your project. Papers in a subcollection or in the main NDC_Lab group library can be filtered by clicking tags on and off in the lower left-hand corner of the Zotero app. Clicking multiple tags will narrow your search further. Clicking on an already selected tag will remove it as a search parameter. ## Quick Tips 1. For an overview of all of Zotero’s features, click [here](https://www.zotero.org/support/quick_start_guide). 2. The Zotero app must be open and running on your computer for the Chrome extension to work. 3. Once you save a pdf to a folder, it should automatically retrieve the metadata from the pdf so it's accessible for citation purposes and so it can be sorted by the author, date published, title, abstract, etc in the Zotero app. If it doesn't load it automatically, right click on a pdf in the app and click Retrieve Metadata. You may have to manually type in the info or correct the info it generates. 4. Triage folders should include the project name in the folder name. When using the Chrome extension, this makes it easy for lab members to be sure they are saving a paper to the correct folder. Project names are not added to the In-Process and Annotated folders to reduce visual noise within the library. 5. After selecting a paper within the app, you can highlight all collections that contain this paper by holding down the “Option” key on Mac OS X, the “Control” key on Windows, or the “Alt” key on Linux.” ## Caveats Avoid creating any modifications—like notes or highlights—to an article or journal under the Group Library entitled NDC_Lab folder on Zotero. Any modifications should be done so only after one has created an individual copy of the paper so that the changes aren’t reflected onto the lab’s archives. To make an individual copy of a paper refer to the following steps: 1. Locate the file for the article of interest under “NDC_Lab.” 2. Drag the original file of the article onto “My Library.” 3. Apply any modifications to the the article under this new file in “My Library.” (Tip for Mac users: Before adding notes or highlights to your own copy using Preview, go to File>Export as PDF, then swap out the Zotero file in \"My Library\" for this new export. This helps ensure stability in the modifications, which otherwise have a tendency to randomly disappear!) ",
    "url": "/docs/technical-docs/zotero.html",
    "relUrl": "/docs/technical-docs/zotero.html"
  }
}
